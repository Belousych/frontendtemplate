window.Modernizr=function(t,e,n){function i(t){b.cssText=t}function o(t,e){return i(C.join(t+";")+(e||""))}function r(t,e){return typeof t===e}function s(t,e){return!!~(""+t).indexOf(e)}function a(t,e){for(var i in t){var o=t[i];if(!s(o,"-")&&b[o]!==n)return"pfx"==e?o:!0}return!1}function l(t,e,i){for(var o in t){var s=e[t[o]];if(s!==n)return i===!1?t[o]:r(s,"function")?s.bind(i||e):s}return!1}function u(t,e,n){var i=t.charAt(0).toUpperCase()+t.slice(1),o=(t+" "+$.join(i+" ")+i).split(" ");return r(e,"string")||r(e,"undefined")?a(o,e):(o=(t+" "+E.join(i+" ")+i).split(" "),l(o,e,n))}function c(){p.input=function(n){for(var i=0,o=n.length;o>i;i++)N[n[i]]=!!(n[i]in w);return N.list&&(N.list=!(!e.createElement("datalist")||!t.HTMLDataListElement)),N}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),p.inputtypes=function(t){for(var i,o,r,s=0,a=t.length;a>s;s++)w.setAttribute("type",o=t[s]),i="text"!==w.type,i&&(w.value=k,w.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(o)&&w.style.WebkitAppearance!==n?(m.appendChild(w),r=e.defaultView,i=r.getComputedStyle&&"textfield"!==r.getComputedStyle(w,null).WebkitAppearance&&0!==w.offsetHeight,m.removeChild(w)):/^(search|tel)$/.test(o)||(i=/^(url|email)$/.test(o)?w.checkValidity&&w.checkValidity()===!1:w.value!=k)),j[t[s]]=!!i;return j}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var d,f,h="2.8.3",p={},g=!0,m=e.documentElement,v="modernizr",y=e.createElement(v),b=y.style,w=e.createElement("input"),k=":)",x={}.toString,C=" -webkit- -moz- -o- -ms- ".split(" "),T="Webkit Moz O ms",$=T.split(" "),E=T.toLowerCase().split(" "),S={svg:"http://www.w3.org/2000/svg"},D={},j={},N={},A=[],M=A.slice,L=function(t,n,i,o){var r,s,a,l,u=e.createElement("div"),c=e.body,d=c||e.createElement("body");if(parseInt(i,10))for(;i--;)a=e.createElement("div"),a.id=o?o[i]:v+(i+1),u.appendChild(a);return r=["&#173;",'<style id="s',v,'">',t,"</style>"].join(""),u.id=v,(c?u:d).innerHTML+=r,d.appendChild(u),c||(d.style.background="",d.style.overflow="hidden",l=m.style.overflow,m.style.overflow="hidden",m.appendChild(d)),s=n(u,t),c?u.parentNode.removeChild(u):(d.parentNode.removeChild(d),m.style.overflow=l),!!s},q=function(e){var n=t.matchMedia||t.msMatchMedia;if(n)return n(e)&&n(e).matches||!1;var i;return L("@media "+e+" { #"+v+" { position: absolute; } }",function(e){i="absolute"==(t.getComputedStyle?getComputedStyle(e,null):e.currentStyle).position}),i},H=function(){function t(t,o){o=o||e.createElement(i[t]||"div"),t="on"+t;var s=t in o;return s||(o.setAttribute||(o=e.createElement("div")),o.setAttribute&&o.removeAttribute&&(o.setAttribute(t,""),s=r(o[t],"function"),r(o[t],"undefined")||(o[t]=n),o.removeAttribute(t))),o=null,s}var i={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return t}(),O={}.hasOwnProperty;f=r(O,"undefined")||r(O.call,"undefined")?function(t,e){return e in t&&r(t.constructor.prototype[e],"undefined")}:function(t,e){return O.call(t,e)},Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if("function"!=typeof e)throw new TypeError;var n=M.call(arguments,1),i=function(){if(this instanceof i){var o=function(){};o.prototype=e.prototype;var r=new o,s=e.apply(r,n.concat(M.call(arguments)));return Object(s)===s?s:r}return e.apply(t,n.concat(M.call(arguments)))};return i}),D.flexbox=function(){return u("flexWrap")},D.flexboxlegacy=function(){return u("boxDirection")},D.canvas=function(){var t=e.createElement("canvas");return!(!t.getContext||!t.getContext("2d"))},D.canvastext=function(){return!(!p.canvas||!r(e.createElement("canvas").getContext("2d").fillText,"function"))},D.webgl=function(){return!!t.WebGLRenderingContext},D.touch=function(){var n;return"ontouchstart"in t||t.DocumentTouch&&e instanceof DocumentTouch?n=!0:L(["@media (",C.join("touch-enabled),("),v,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(t){n=9===t.offsetTop}),n},D.geolocation=function(){return"geolocation"in navigator},D.postmessage=function(){return!!t.postMessage},D.websqldatabase=function(){return!!t.openDatabase},D.indexedDB=function(){return!!u("indexedDB",t)},D.hashchange=function(){return H("hashchange",t)&&(e.documentMode===n||e.documentMode>7)},D.history=function(){return!(!t.history||!history.pushState)},D.draganddrop=function(){var t=e.createElement("div");return"draggable"in t||"ondragstart"in t&&"ondrop"in t},D.websockets=function(){return"WebSocket"in t||"MozWebSocket"in t},D.rgba=function(){return i("background-color:rgba(150,255,150,.5)"),s(b.backgroundColor,"rgba")},D.hsla=function(){return i("background-color:hsla(120,40%,100%,.5)"),s(b.backgroundColor,"rgba")||s(b.backgroundColor,"hsla")},D.multiplebgs=function(){return i("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(b.background)},D.backgroundsize=function(){return u("backgroundSize")},D.borderimage=function(){return u("borderImage")},D.borderradius=function(){return u("borderRadius")},D.boxshadow=function(){return u("boxShadow")},D.textshadow=function(){return""===e.createElement("div").style.textShadow},D.opacity=function(){return o("opacity:.55"),/^0.55$/.test(b.opacity)},D.cssanimations=function(){return u("animationName")},D.csscolumns=function(){return u("columnCount")},D.cssgradients=function(){var t="background-image:",e="gradient(linear,left top,right bottom,from(#9f9),to(white));",n="linear-gradient(left top,#9f9, white);";return i((t+"-webkit- ".split(" ").join(e+t)+C.join(n+t)).slice(0,-t.length)),s(b.backgroundImage,"gradient")},D.cssreflections=function(){return u("boxReflect")},D.csstransforms=function(){return!!u("transform")},D.csstransforms3d=function(){var t=!!u("perspective");return t&&"webkitPerspective"in m.style&&L("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(e,n){t=9===e.offsetLeft&&3===e.offsetHeight}),t},D.csstransitions=function(){return u("transition")},D.fontface=function(){var t;return L('@font-face {font-family:"font";src:url("https://")}',function(n,i){var o=e.getElementById("smodernizr"),r=o.sheet||o.styleSheet,s=r?r.cssRules&&r.cssRules[0]?r.cssRules[0].cssText:r.cssText||"":"";t=/src/i.test(s)&&0===s.indexOf(i.split(" ")[0])}),t},D.generatedcontent=function(){var t;return L(["#",v,"{font:0/0 a}#",v,':after{content:"',k,'";visibility:hidden;font:3px/1 a}'].join(""),function(e){t=e.offsetHeight>=3}),t},D.video=function(){var t=e.createElement("video"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=t.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=t.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(i){}return n},D.audio=function(){var t=e.createElement("audio"),n=!1;try{(n=!!t.canPlayType)&&(n=new Boolean(n),n.ogg=t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=t.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=t.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(i){}return n},D.localstorage=function(){try{return localStorage.setItem(v,v),localStorage.removeItem(v),!0}catch(t){return!1}},D.sessionstorage=function(){try{return sessionStorage.setItem(v,v),sessionStorage.removeItem(v),!0}catch(t){return!1}},D.webworkers=function(){return!!t.Worker},D.applicationcache=function(){return!!t.applicationCache},D.svg=function(){return!!e.createElementNS&&!!e.createElementNS(S.svg,"svg").createSVGRect},D.inlinesvg=function(){var t=e.createElement("div");return t.innerHTML="<svg/>",(t.firstChild&&t.firstChild.namespaceURI)==S.svg},D.smil=function(){return!!e.createElementNS&&/SVGAnimate/.test(x.call(e.createElementNS(S.svg,"animate")))},D.svgclippaths=function(){return!!e.createElementNS&&/SVGClipPath/.test(x.call(e.createElementNS(S.svg,"clipPath")))};for(var P in D)f(D,P)&&(d=P.toLowerCase(),p[d]=D[P](),A.push((p[d]?"":"no-")+d));return p.input||c(),p.addTest=function(t,e){if("object"==typeof t)for(var i in t)f(t,i)&&p.addTest(i,t[i]);else{if(t=t.toLowerCase(),p[t]!==n)return p;e="function"==typeof e?e():e,"undefined"!=typeof g&&g&&(m.className+=" "+(e?"":"no-")+t),p[t]=e}return p},i(""),y=w=null,function(t,e){function n(t,e){var n=t.createElement("p"),i=t.getElementsByTagName("head")[0]||t.documentElement;return n.innerHTML="x<style>"+e+"</style>",i.insertBefore(n.lastChild,i.firstChild)}function i(){var t=y.elements;return"string"==typeof t?t.split(" "):t}function o(t){var e=v[t[g]];return e||(e={},m++,t[g]=m,v[m]=e),e}function r(t,n,i){if(n||(n=e),c)return n.createElement(t);i||(i=o(n));var r;return r=i.cache[t]?i.cache[t].cloneNode():p.test(t)?(i.cache[t]=i.createElem(t)).cloneNode():i.createElem(t),!r.canHaveChildren||h.test(t)||r.tagUrn?r:i.frag.appendChild(r)}function s(t,n){if(t||(t=e),c)return t.createDocumentFragment();n=n||o(t);for(var r=n.frag.cloneNode(),s=0,a=i(),l=a.length;l>s;s++)r.createElement(a[s]);return r}function a(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(n){return y.shivMethods?r(n,t,e):e.createElem(n)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+i().join().replace(/[\w\-]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")(y,e.frag)}function l(t){t||(t=e);var i=o(t);return!y.shivCSS||u||i.hasCSS||(i.hasCSS=!!n(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),c||a(t,i),t}var u,c,d="3.7.0",f=t.html5||{},h=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,p=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,g="_html5shiv",m=0,v={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",u="hidden"in t,c=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return"undefined"==typeof t.cloneNode||"undefined"==typeof t.createDocumentFragment||"undefined"==typeof t.createElement}()}catch(n){u=!0,c=!0}}();var y={elements:f.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:d,shivCSS:f.shivCSS!==!1,supportsUnknownElements:c,shivMethods:f.shivMethods!==!1,type:"default",shivDocument:l,createElement:r,createDocumentFragment:s};t.html5=y,l(e)}(this,e),p._version=h,p._prefixes=C,p._domPrefixes=E,p._cssomPrefixes=$,p.mq=q,p.hasEvent=H,p.testProp=function(t){return a([t])},p.testAllProps=u,p.testStyles=L,p.prefixed=function(t,e,n){return e?u(t,e,n):u(t,"pfx")},m.className=m.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(g?" js "+A.join(" "):""),p}(this,this.document),function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=rt.type(t);return"function"===n||rt.isWindow(t)?!1:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function i(t,e,n){if(rt.isFunction(e))return rt.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return rt.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(gt.test(e))return rt.filter(e,t,n);e=rt.filter(e,t)}return rt.grep(t,function(t){return Z.call(e,t)>-1!==n})}function o(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function r(t){var e={};return rt.each(t.match(kt)||[],function(t,n){e[n]=!0}),e}function s(){G.removeEventListener("DOMContentLoaded",s),t.removeEventListener("load",s),rt.ready()}function a(){this.expando=rt.expando+a.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Dt,"-$&").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:St.test(n)?rt.parseJSON(n):n}catch(o){}Et.set(t,e,n)}else n=void 0;return n}function u(t,e,n,i){var o,r=1,s=20,a=i?function(){return i.cur()}:function(){return rt.css(t,e,"")},l=a(),u=n&&n[3]||(rt.cssNumber[e]?"":"px"),c=(rt.cssNumber[e]||"px"!==u&&+l)&&Nt.exec(rt.css(t,e));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do r=r||".5",c/=r,rt.style(t,e,c+u);while(r!==(r=a()/l)&&1!==r&&--s)}return n&&(c=+c||+l||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=o)),o}function c(t,e){var n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&rt.nodeName(t,e)?rt.merge([t],n):n}function d(t,e){for(var n=0,i=t.length;i>n;n++)$t.set(t[n],"globalEval",!e||$t.get(e[n],"globalEval"))}function f(t,e,n,i,o){for(var r,s,a,l,u,f,h=e.createDocumentFragment(),p=[],g=0,m=t.length;m>g;g++)if(r=t[g],r||0===r)if("object"===rt.type(r))rt.merge(p,r.nodeType?[r]:r);else if(Pt.test(r)){for(s=s||h.appendChild(e.createElement("div")),a=(qt.exec(r)||["",""])[1].toLowerCase(),l=Ot[a]||Ot._default,s.innerHTML=l[1]+rt.htmlPrefilter(r)+l[2],f=l[0];f--;)s=s.lastChild;rt.merge(p,s.childNodes),s=h.firstChild,s.textContent=""}else p.push(e.createTextNode(r));for(h.textContent="",g=0;r=p[g++];)if(i&&rt.inArray(r,i)>-1)o&&o.push(r);else if(u=rt.contains(r.ownerDocument,r),s=c(h.appendChild(r),"script"),u&&d(s),n)for(f=0;r=s[f++];)Ht.test(r.type||"")&&n.push(r);return h}function h(){return!0}function p(){return!1}function g(){try{return G.activeElement}catch(t){}}function m(t,e,n,i,o,r){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)m(t,a,n,i,e[a],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),o===!1)o=p;else if(!o)return t;return 1===r&&(s=o,o=function(t){return rt().off(t),s.apply(this,arguments)},o.guid=s.guid||(s.guid=rt.guid++)),t.each(function(){rt.event.add(this,e,o,i,n)})}function v(t,e){return rt.nodeName(t,"table")&&rt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function y(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function b(t){var e=zt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function w(t,e){var n,i,o,r,s,a,l,u;if(1===e.nodeType){if($t.hasData(t)&&(r=$t.access(t),s=$t.set(e,r),u=r.events)){delete s.handle,s.events={};for(o in u)for(n=0,i=u[o].length;i>n;n++)rt.event.add(e,o,u[o][n])}Et.hasData(t)&&(a=Et.access(t),l=rt.extend({},a),Et.set(e,l))}}function k(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Lt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function x(t,e,n,i){e=J.apply([],e);var o,r,s,a,l,u,d=0,h=t.length,p=h-1,g=e[0],m=rt.isFunction(g);if(m||h>1&&"string"==typeof g&&!it.checkClone&&_t.test(g))return t.each(function(o){var r=t.eq(o);m&&(e[0]=g.call(this,o,r.html())),x(r,e,n,i)});if(h&&(o=f(e,t[0].ownerDocument,!1,t,i),r=o.firstChild,1===o.childNodes.length&&(o=r),r||i)){for(s=rt.map(c(o,"script"),y),a=s.length;h>d;d++)l=o,d!==p&&(l=rt.clone(l,!0,!0),a&&rt.merge(s,c(l,"script"))),n.call(t[d],l,d);if(a)for(u=s[s.length-1].ownerDocument,rt.map(s,b),d=0;a>d;d++)l=s[d],Ht.test(l.type||"")&&!$t.access(l,"globalEval")&&rt.contains(u,l)&&(l.src?rt._evalUrl&&rt._evalUrl(l.src):rt.globalEval(l.textContent.replace(Bt,"")))}return t}function C(t,e,n){for(var i,o=e?rt.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||rt.cleanData(c(i)),i.parentNode&&(n&&rt.contains(i.ownerDocument,i)&&d(c(i,"script")),i.parentNode.removeChild(i));return t}function T(t,e){var n=rt(e.createElement(t)).appendTo(e.body),i=rt.css(n[0],"display");return n.detach(),i}function $(t){var e=G,n=Vt[t];return n||(n=T(t,e),"none"!==n&&n||(Xt=(Xt||rt("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Xt[0].contentDocument,e.write(),e.close(),n=T(t,e),Xt.detach()),Vt[t]=n),n}function E(t,e,n){var i,o,r,s,a=t.style;return n=n||Qt(t),s=n?n.getPropertyValue(e)||n[e]:void 0,""!==s&&void 0!==s||rt.contains(t.ownerDocument,t)||(s=rt.style(t,e)),n&&!it.pixelMarginRight()&&Gt.test(s)&&Yt.test(e)&&(i=a.width,o=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=o,a.maxWidth=r),void 0!==s?s+"":s}function S(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function D(t){if(t in ie)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ne.length;n--;)if(t=ne[n]+e,t in ie)return t}function j(t,e,n){var i=Nt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function N(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>r;r+=2)"margin"===n&&(s+=rt.css(t,n+At[r],!0,o)),i?("content"===n&&(s-=rt.css(t,"padding"+At[r],!0,o)),"margin"!==n&&(s-=rt.css(t,"border"+At[r]+"Width",!0,o))):(s+=rt.css(t,"padding"+At[r],!0,o),"padding"!==n&&(s+=rt.css(t,"border"+At[r]+"Width",!0,o)));return s}function A(e,n,i){var o=!0,r="width"===n?e.offsetWidth:e.offsetHeight,s=Qt(e),a="border-box"===rt.css(e,"boxSizing",!1,s);if(G.msFullscreenElement&&t.top!==t&&e.getClientRects().length&&(r=Math.round(100*e.getBoundingClientRect()[n])),0>=r||null==r){if(r=E(e,n,s),(0>r||null==r)&&(r=e.style[n]),Gt.test(r))return r;o=a&&(it.boxSizingReliable()||r===e.style[n]),r=parseFloat(r)||0}return r+N(e,n,i||(a?"border":"content"),o,s)+"px"}function M(t,e){for(var n,i,o,r=[],s=0,a=t.length;a>s;s++)i=t[s],i.style&&(r[s]=$t.get(i,"olddisplay"),n=i.style.display,e?(r[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Mt(i)&&(r[s]=$t.access(i,"olddisplay",$(i.nodeName)))):(o=Mt(i),"none"===n&&o||$t.set(i,"olddisplay",o?n:rt.css(i,"display"))));for(s=0;a>s;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[s]||"":"none"));return t}function L(t,e,n,i,o){return new L.prototype.init(t,e,n,i,o)}function q(){return t.setTimeout(function(){oe=void 0}),oe=rt.now()}function H(t,e){var n,i=0,o={height:t};for(e=e?1:0;4>i;i+=2-e)n=At[i],o["margin"+n]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function O(t,e,n){for(var i,o=(I.tweeners[e]||[]).concat(I.tweeners["*"]),r=0,s=o.length;s>r;r++)if(i=o[r].call(n,e,t))return i}function P(t,e,n){var i,o,r,s,a,l,u,c,d=this,f={},h=t.style,p=t.nodeType&&Mt(t),g=$t.get(t,"fxshow");n.queue||(a=rt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,rt.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=rt.css(t,"display"),c="none"===u?$t.get(t,"olddisplay")||$(t.nodeName):u,"inline"===c&&"none"===rt.css(t,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(i in e)if(o=e[i],se.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(p?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;p=!0}f[i]=g&&g[i]||rt.style(t,i)}else u=void 0;if(rt.isEmptyObject(f))"inline"===("none"===u?$(t.nodeName):u)&&(h.display=u);else{g?"hidden"in g&&(p=g.hidden):g=$t.access(t,"fxshow",{}),r&&(g.hidden=!p),p?rt(t).show():d.done(function(){rt(t).hide()}),d.done(function(){var e;$t.remove(t,"fxshow");for(e in f)rt.style(t,e,f[e])});for(i in f)s=O(p?g[i]:0,i,d),i in g||(g[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function U(t,e){var n,i,o,r,s;for(n in t)if(i=rt.camelCase(n),o=e[i],r=t[n],rt.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),s=rt.cssHooks[i],s&&"expand"in s){r=s.expand(r),delete t[i];for(n in r)n in t||(t[n]=r[n],e[n]=o)}else e[i]=o}function I(t,e,n){var i,o,r=0,s=I.prefilters.length,a=rt.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=oe||q(),n=Math.max(0,u.startTime+u.duration-e),i=n/u.duration||0,r=1-i,s=0,l=u.tweens.length;l>s;s++)u.tweens[s].run(r);return a.notifyWith(t,[u,r,n]),1>r&&l?n:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:rt.extend({},e),opts:rt.extend(!0,{specialEasing:{},easing:rt.easing._default},n),originalProperties:e,originalOptions:n,startTime:oe||q(),duration:n.duration,tweens:[],createTween:function(e,n){var i=rt.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(o)return this;for(o=!0;i>n;n++)u.tweens[n].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),c=u.props;for(U(c,u.opts.specialEasing);s>r;r++)if(i=I.prefilters[r].call(u,t,c,u.opts))return rt.isFunction(i.stop)&&(rt._queueHooks(u.elem,u.opts.queue).stop=rt.proxy(i.stop,i)),i;return rt.map(c,O,u),rt.isFunction(u.opts.start)&&u.opts.start.call(t,u),rt.fx.timer(rt.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function F(t){return t.getAttribute&&t.getAttribute("class")||""}function R(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(kt)||[];if(rt.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function W(t,e,n,i){function o(a){var l;return r[a]=!0,rt.each(t[a]||[],function(t,a){var u=a(e,n,i);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),o(u),!1)}),l}var r={},s=t===$e;return o(e.dataTypes[0])||!r["*"]&&o("*")}function _(t,e){var n,i,o=rt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&rt.extend(!0,t,i),t}function z(t,e,n){for(var i,o,r,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in a)if(a[o]&&a[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}s||(s=o)}r=r||s}return r?(r!==l[0]&&l.unshift(r),n[r]):void 0}function B(t,e,n,i){var o,r,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(r=c.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(s=u[l+" "+r]||u["* "+r],!s)for(o in u)if(a=o.split(" "),a[1]===r&&(s=u[l+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[o]:u[o]!==!0&&(r=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(d){return{state:"parsererror",error:s?d:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}function X(t,e,n,i){var o;if(rt.isArray(e))rt.each(e,function(e,o){n||je.test(t)?i(t,o):X(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)});else if(n||"object"!==rt.type(e))i(t,e);else for(o in e)X(t+"["+o+"]",e[o],n,i)}function V(t){return rt.isWindow(t)?t:9===t.nodeType&&t.defaultView}var Y=[],G=t.document,Q=Y.slice,J=Y.concat,K=Y.push,Z=Y.indexOf,tt={},et=tt.toString,nt=tt.hasOwnProperty,it={},ot="2.2.1",rt=function(t,e){return new rt.fn.init(t,e)},st=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,at=/^-ms-/,lt=/-([\da-z])/gi,ut=function(t,e){return e.toUpperCase()};rt.fn=rt.prototype={jquery:ot,constructor:rt,selector:"",length:0,toArray:function(){return Q.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:Q.call(this)},pushStack:function(t){var e=rt.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return rt.each(this,t)},map:function(t){return this.pushStack(rt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(Q.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:K,sort:Y.sort,splice:Y.splice},rt.extend=rt.fn.extend=function(){var t,e,n,i,o,r,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||rt.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],i=t[e],s!==i&&(u&&i&&(rt.isPlainObject(i)||(o=rt.isArray(i)))?(o?(o=!1,r=n&&rt.isArray(n)?n:[]):r=n&&rt.isPlainObject(n)?n:{},s[e]=rt.extend(u,r,i)):void 0!==i&&(s[e]=i));return s},rt.extend({expando:"jQuery"+(ot+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===rt.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!rt.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){return"object"!==rt.type(t)||t.nodeType||rt.isWindow(t)?!1:!t.constructor||nt.call(t.constructor.prototype,"isPrototypeOf")},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?tt[et.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=rt.trim(t),t&&(1===t.indexOf("use strict")?(e=G.createElement("script"),e.text=t,G.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(at,"ms-").replace(lt,ut)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,o=0;if(n(t))for(i=t.length;i>o&&e.call(t[o],o,t[o])!==!1;o++);else for(o in t)if(e.call(t[o],o,t[o])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(st,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?rt.merge(i,"string"==typeof t?[t]:t):K.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:Z.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;n>i;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i,o=[],r=0,s=t.length,a=!n;s>r;r++)i=!e(t[r],r),i!==a&&o.push(t[r]);return o},map:function(t,e,i){var o,r,s=0,a=[];if(n(t))for(o=t.length;o>s;s++)r=e(t[s],s,i),null!=r&&a.push(r);else for(s in t)r=e(t[s],s,i),null!=r&&a.push(r);return J.apply([],a)},guid:1,proxy:function(t,e){var n,i,o;return"string"==typeof e&&(n=t[e],e=t,t=n),rt.isFunction(t)?(i=Q.call(arguments,2),o=function(){return t.apply(e||this,i.concat(Q.call(arguments)))},o.guid=t.guid=t.guid||rt.guid++,o):void 0},now:Date.now,support:it}),"function"==typeof Symbol&&(rt.fn[Symbol.iterator]=Y[Symbol.iterator]),rt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){tt["[object "+e+"]"]=e.toLowerCase()});var ct=function(t){function e(t,e,n,i){var o,r,s,a,l,u,d,h,p=e&&e.ownerDocument,g=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==g&&9!==g&&11!==g)return n;if(!i&&((e?e.ownerDocument||e:F)!==M&&A(e),e=e||M,q)){if(11!==g&&(u=vt.exec(t)))if(o=u[1]){if(9===g){if(!(s=e.getElementById(o)))return n;if(s.id===o)return n.push(s),n}else if(p&&(s=p.getElementById(o))&&U(e,s)&&s.id===o)return n.push(s),n}else{if(u[2])return K.apply(n,e.getElementsByTagName(t)),n;if((o=u[3])&&k.getElementsByClassName&&e.getElementsByClassName)return K.apply(n,e.getElementsByClassName(o)),n}if(k.qsa&&!B[t+" "]&&(!H||!H.test(t))){if(1!==g)p=e,h=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(bt,"\\$&"):e.setAttribute("id",a=I),d=$(t),r=d.length,l=ft.test(a)?"#"+a:"[id='"+a+"']";r--;)d[r]=l+" "+f(d[r]);h=d.join(","),p=yt.test(t)&&c(e.parentNode)||e}if(h)try{return K.apply(n,p.querySelectorAll(h)),n}catch(m){}finally{a===I&&e.removeAttribute("id")}}}return S(t.replace(at,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[I]=!0,t}function o(t){var e=M.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function r(t,e){for(var n=t.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return i(function(e){return e=+e,i(function(n,i){for(var o,r=t([],n.length,e),s=r.length;s--;)n[o=r[s]]&&(n[o]=!(i[o]=n[o]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function d(){}function f(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function h(t,e,n){var i=e.dir,o=n&&"parentNode"===i,r=W++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,r)}:function(e,n,s){var a,l,u,c=[R,r];if(s){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||o){if(u=e[I]||(e[I]={}),l=u[e.uniqueID]||(u[e.uniqueID]={}),(a=l[i])&&a[0]===R&&a[1]===r)return c[2]=a[2];if(l[i]=c,c[2]=t(e,n,s))return!0}}}function p(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function g(t,n,i){for(var o=0,r=n.length;r>o;o++)e(t,n[o],i);return i}function m(t,e,n,i,o){for(var r,s=[],a=0,l=t.length,u=null!=e;l>a;a++)(r=t[a])&&(n&&!n(r,i,o)||(s.push(r),u&&e.push(a)));return s}function v(t,e,n,o,r,s){return o&&!o[I]&&(o=v(o)),r&&!r[I]&&(r=v(r,s)),i(function(i,s,a,l){var u,c,d,f=[],h=[],p=s.length,v=i||g(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:m(v,f,t,a,l),b=n?r||(i?t:p||o)?[]:s:y;if(n&&n(y,b,a,l),o)for(u=m(b,h),o(u,[],a,l),c=u.length;c--;)(d=u[c])&&(b[h[c]]=!(y[h[c]]=d));if(i){if(r||t){if(r){for(u=[],c=b.length;c--;)(d=b[c])&&u.push(y[c]=d);r(null,b=[],u,l)}for(c=b.length;c--;)(d=b[c])&&(u=r?tt(i,d):f[c])>-1&&(i[u]=!(s[u]=d))}}else b=m(b===s?b.splice(p,b.length):b),r?r(null,s,b,l):K.apply(s,b)})}function y(t){for(var e,n,i,o=t.length,r=x.relative[t[0].type],s=r||x.relative[" "],a=r?1:0,l=h(function(t){return t===e},s,!0),u=h(function(t){return tt(e,t)>-1},s,!0),c=[function(t,n,i){var o=!r&&(i||n!==D)||((e=n).nodeType?l(t,n,i):u(t,n,i));return e=null,o}];o>a;a++)if(n=x.relative[t[a].type])c=[h(p(c),n)];else{if(n=x.filter[t[a].type].apply(null,t[a].matches),n[I]){for(i=++a;o>i&&!x.relative[t[i].type];i++);return v(a>1&&p(c),a>1&&f(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),n,i>a&&y(t.slice(a,i)),o>i&&y(t=t.slice(i)),o>i&&f(t))}c.push(n)}return p(c)}function b(t,n){var o=n.length>0,r=t.length>0,s=function(i,s,a,l,u){var c,d,f,h=0,p="0",g=i&&[],v=[],y=D,b=i||r&&x.find.TAG("*",u),w=R+=null==y?1:Math.random()||.1,k=b.length;for(u&&(D=s===M||s||u);p!==k&&null!=(c=b[p]);p++){if(r&&c){for(d=0,s||c.ownerDocument===M||(A(c),a=!q);f=t[d++];)if(f(c,s||M,a)){l.push(c);break}u&&(R=w)}o&&((c=!f&&c)&&h--,i&&g.push(c))}if(h+=p,o&&p!==h){for(d=0;f=n[d++];)f(g,v,s,a);if(i){if(h>0)for(;p--;)g[p]||v[p]||(v[p]=Q.call(l));v=m(v)}K.apply(l,v),u&&!i&&v.length>0&&h+n.length>1&&e.uniqueSort(l)}return u&&(R=w,D=y),g};return o?i(s):s}var w,k,x,C,T,$,E,S,D,j,N,A,M,L,q,H,O,P,U,I="sizzle"+1*new Date,F=t.document,R=0,W=0,_=n(),z=n(),B=n(),X=function(t,e){return t===e&&(N=!0),0},V=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,J=G.push,K=G.push,Z=G.slice,tt=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ot="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",rt=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",st=new RegExp(nt+"+","g"),at=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),lt=new RegExp("^"+nt+"*,"+nt+"*"),ut=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ct=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),dt=new RegExp(rt),ft=new RegExp("^"+it+"$"),ht={
ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it+"|[*])"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+rt),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},pt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,mt=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,yt=/[+~]/,bt=/'|\\/g,wt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),kt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},xt=function(){A()};try{K.apply(G=Z.call(F.childNodes),F.childNodes),G[F.childNodes.length].nodeType}catch(Ct){K={apply:G.length?function(t,e){J.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}k=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},A=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:F;return i!==M&&9===i.nodeType&&i.documentElement?(M=i,L=M.documentElement,q=!T(M),(n=M.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",xt,!1):n.attachEvent&&n.attachEvent("onunload",xt)),k.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),k.getElementsByTagName=o(function(t){return t.appendChild(M.createComment("")),!t.getElementsByTagName("*").length}),k.getElementsByClassName=mt.test(M.getElementsByClassName),k.getById=o(function(t){return L.appendChild(t).id=I,!M.getElementsByName||!M.getElementsByName(I).length}),k.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&q){var n=e.getElementById(t);return n?[n]:[]}},x.filter.ID=function(t){var e=t.replace(wt,kt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(wt,kt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=k.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):k.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},x.find.CLASS=k.getElementsByClassName&&function(t,e){return"undefined"!=typeof e.getElementsByClassName&&q?e.getElementsByClassName(t):void 0},O=[],H=[],(k.qsa=mt.test(M.querySelectorAll))&&(o(function(t){L.appendChild(t).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&H.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||H.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+I+"-]").length||H.push("~="),t.querySelectorAll(":checked").length||H.push(":checked"),t.querySelectorAll("a#"+I+"+*").length||H.push(".#.+[+~]")}),o(function(t){var e=M.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&H.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||H.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),H.push(",.*:")})),(k.matchesSelector=mt.test(P=L.matches||L.webkitMatchesSelector||L.mozMatchesSelector||L.oMatchesSelector||L.msMatchesSelector))&&o(function(t){k.disconnectedMatch=P.call(t,"div"),P.call(t,"[s!='']:x"),O.push("!=",rt)}),H=H.length&&new RegExp(H.join("|")),O=O.length&&new RegExp(O.join("|")),e=mt.test(L.compareDocumentPosition),U=e||mt.test(L.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},X=e?function(t,e){if(t===e)return N=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!k.sortDetached&&e.compareDocumentPosition(t)===n?t===M||t.ownerDocument===F&&U(F,t)?-1:e===M||e.ownerDocument===F&&U(F,e)?1:j?tt(j,t)-tt(j,e):0:4&n?-1:1)}:function(t,e){if(t===e)return N=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,a=[t],l=[e];if(!o||!r)return t===M?-1:e===M?1:o?-1:r?1:j?tt(j,t)-tt(j,e):0;if(o===r)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===F?-1:l[i]===F?1:0},M):M},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==M&&A(t),n=n.replace(ct,"='$1']"),k.matchesSelector&&q&&!B[n+" "]&&(!O||!O.test(n))&&(!H||!H.test(n)))try{var i=P.call(t,n);if(i||k.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(o){}return e(n,M,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==M&&A(t),U(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==M&&A(t);var n=x.attrHandle[e.toLowerCase()],i=n&&Y.call(x.attrHandle,e.toLowerCase())?n(t,e,!q):void 0;return void 0!==i?i:k.attributes||!q?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,o=0;if(N=!k.detectDuplicates,j=!k.sortStable&&t.slice(0),t.sort(X),N){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return j=null,t},C=e.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=C(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=C(e);return n},x=e.selectors={cacheLength:50,createPseudo:i,match:ht,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(wt,kt),t[3]=(t[3]||t[4]||t[5]||"").replace(wt,kt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ht.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&dt.test(n)&&(e=$(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(wt,kt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=_[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&_(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(o){var r=e.attr(o,t);return null==r?"!="===n:n?(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(st," ")+" ").indexOf(i)>-1:"|="===n?r===i||r.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var u,c,d,f,h,p,g=r!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(m){if(r){for(;g;){for(f=e;f=f[g];)if(a?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&y){for(f=m,d=f[I]||(f[I]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),u=c[t]||[],h=u[0]===R&&u[1],b=h&&u[2],f=h&&m.childNodes[h];f=++h&&f&&f[g]||(b=h=0)||p.pop();)if(1===f.nodeType&&++b&&f===e){c[t]=[R,h,b];break}}else if(y&&(f=e,d=f[I]||(f[I]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),u=c[t]||[],h=u[0]===R&&u[1],b=h),b===!1)for(;(f=++h&&f&&f[g]||(b=h=0)||p.pop())&&((a?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&(d=f[I]||(f[I]={}),c=d[f.uniqueID]||(d[f.uniqueID]={}),c[t]=[R,b]),f!==e)););return b-=o,b===i||b%i===0&&b/i>=0}}},PSEUDO:function(t,n){var o,r=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return r[I]?r(n):r.length>1?(o=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,o=r(t,n),s=o.length;s--;)i=tt(t,o[s]),t[i]=!(e[i]=o[s])}):function(t){return r(t,0,o)}):r}},pseudos:{not:i(function(t){var e=[],n=[],o=E(t.replace(at,"$1"));return o[I]?i(function(t,e,n,i){for(var r,s=o(t,null,i,[]),a=t.length;a--;)(r=s[a])&&(t[a]=!(e[a]=r))}):function(t,i,r){return e[0]=t,o(e,null,r,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(wt,kt),function(e){return(e.textContent||e.innerText||C(e)).indexOf(t)>-1}}),lang:i(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(wt,kt).toLowerCase(),function(e){var n;do if(n=q?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===L},focus:function(t){return t===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return pt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[0>n?n+e:n]}),even:u(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},x.pseudos.nth=x.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})x.pseudos[w]=l(w);return d.prototype=x.filters=x.pseudos,x.setFilters=new d,$=e.tokenize=function(t,n){var i,o,r,s,a,l,u,c=z[t+" "];if(c)return n?0:c.slice(0);for(a=t,l=[],u=x.preFilter;a;){i&&!(o=lt.exec(a))||(o&&(a=a.slice(o[0].length)||a),l.push(r=[])),i=!1,(o=ut.exec(a))&&(i=o.shift(),r.push({value:i,type:o[0].replace(at," ")}),a=a.slice(i.length));for(s in x.filter)!(o=ht[s].exec(a))||u[s]&&!(o=u[s](o))||(i=o.shift(),r.push({value:i,type:s,matches:o}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):z(t,l).slice(0)},E=e.compile=function(t,e){var n,i=[],o=[],r=B[t+" "];if(!r){for(e||(e=$(t)),n=e.length;n--;)r=y(e[n]),r[I]?i.push(r):o.push(r);r=B(t,b(o,i)),r.selector=t}return r},S=e.select=function(t,e,n,i){var o,r,s,a,l,u="function"==typeof t&&t,d=!i&&$(t=u.selector||t);if(n=n||[],1===d.length){if(r=d[0]=d[0].slice(0),r.length>2&&"ID"===(s=r[0]).type&&k.getById&&9===e.nodeType&&q&&x.relative[r[1].type]){if(e=(x.find.ID(s.matches[0].replace(wt,kt),e)||[])[0],!e)return n;u&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=ht.needsContext.test(t)?0:r.length;o--&&(s=r[o],!x.relative[a=s.type]);)if((l=x.find[a])&&(i=l(s.matches[0].replace(wt,kt),yt.test(r[0].type)&&c(e.parentNode)||e))){if(r.splice(o,1),t=i.length&&f(r),!t)return K.apply(n,i),n;break}}return(u||E(t,d))(i,e,!q,n,!e||yt.test(t)&&c(e.parentNode)||e),n},k.sortStable=I.split("").sort(X).join("")===I,k.detectDuplicates=!!N,A(),k.sortDetached=o(function(t){return 1&t.compareDocumentPosition(M.createElement("div"))}),o(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||r("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),k.attributes&&o(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||r("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),o(function(t){return null==t.getAttribute("disabled")})||r(et,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);rt.find=ct,rt.expr=ct.selectors,rt.expr[":"]=rt.expr.pseudos,rt.uniqueSort=rt.unique=ct.uniqueSort,rt.text=ct.getText,rt.isXMLDoc=ct.isXML,rt.contains=ct.contains;var dt=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&rt(t).is(n))break;i.push(t)}return i},ft=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},ht=rt.expr.match.needsContext,pt=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,gt=/^.[^:#\[\.,]*$/;rt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?rt.find.matchesSelector(i,t)?[i]:[]:rt.find.matches(t,rt.grep(e,function(t){return 1===t.nodeType}))},rt.fn.extend({find:function(t){var e,n=this.length,i=[],o=this;if("string"!=typeof t)return this.pushStack(rt(t).filter(function(){for(e=0;n>e;e++)if(rt.contains(o[e],this))return!0}));for(e=0;n>e;e++)rt.find(t,o[e],i);return i=this.pushStack(n>1?rt.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ht.test(t)?rt(t):t||[],!1).length}});var mt,vt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,yt=rt.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||mt,"string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:vt.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof rt?e[0]:e,rt.merge(this,rt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:G,!0)),pt.test(i[1])&&rt.isPlainObject(e))for(i in e)rt.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return o=G.getElementById(i[2]),o&&o.parentNode&&(this.length=1,this[0]=o),this.context=G,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):rt.isFunction(t)?void 0!==n.ready?n.ready(t):t(rt):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),rt.makeArray(t,this))};yt.prototype=rt.fn,mt=rt(G);var bt=/^(?:parents|prev(?:Until|All))/,wt={children:!0,contents:!0,next:!0,prev:!0};rt.fn.extend({has:function(t){var e=rt(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(rt.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,o=this.length,r=[],s=ht.test(t)||"string"!=typeof t?rt(t,e||this.context):0;o>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&rt.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?rt.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?Z.call(rt(t),this[0]):Z.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(rt.uniqueSort(rt.merge(this.get(),rt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),rt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return dt(t,"parentNode")},parentsUntil:function(t,e,n){return dt(t,"parentNode",n)},next:function(t){return o(t,"nextSibling")},prev:function(t){return o(t,"previousSibling")},nextAll:function(t){return dt(t,"nextSibling")},prevAll:function(t){return dt(t,"previousSibling")},nextUntil:function(t,e,n){return dt(t,"nextSibling",n)},prevUntil:function(t,e,n){return dt(t,"previousSibling",n)},siblings:function(t){return ft((t.parentNode||{}).firstChild,t)},children:function(t){return ft(t.firstChild)},contents:function(t){return t.contentDocument||rt.merge([],t.childNodes)}},function(t,e){rt.fn[t]=function(n,i){var o=rt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=rt.filter(i,o)),this.length>1&&(wt[t]||rt.uniqueSort(o),bt.test(t)&&o.reverse()),this.pushStack(o)}});var kt=/\S+/g;rt.Callbacks=function(t){t="string"==typeof t?r(t):rt.extend({},t);var e,n,i,o,s=[],a=[],l=-1,u=function(){for(o=t.once,i=e=!0;a.length;l=-1)for(n=a.shift();++l<s.length;)s[l].apply(n[0],n[1])===!1&&t.stopOnFalse&&(l=s.length,n=!1);t.memory||(n=!1),e=!1,o&&(s=n?[]:"")},c={add:function(){return s&&(n&&!e&&(l=s.length-1,a.push(n)),function i(e){rt.each(e,function(e,n){rt.isFunction(n)?t.unique&&c.has(n)||s.push(n):n&&n.length&&"string"!==rt.type(n)&&i(n)})}(arguments),n&&!e&&u()),this},remove:function(){return rt.each(arguments,function(t,e){for(var n;(n=rt.inArray(e,s,n))>-1;)s.splice(n,1),l>=n&&l--}),this},has:function(t){return t?rt.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return o=a=[],s=n="",this},disabled:function(){return!s},lock:function(){return o=a=[],n||(s=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},rt.extend({Deferred:function(t){var e=[["resolve","done",rt.Callbacks("once memory"),"resolved"],["reject","fail",rt.Callbacks("once memory"),"rejected"],["notify","progress",rt.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return rt.Deferred(function(n){rt.each(e,function(e,r){var s=rt.isFunction(t[e])&&t[e];o[r[1]](function(){var t=s&&s.apply(this,arguments);t&&rt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?rt.extend(t,i):i}},o={};return i.pipe=i.then,rt.each(e,function(t,r){var s=r[2],a=r[3];i[r[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e,n,i,o=0,r=Q.call(arguments),s=r.length,a=1!==s||t&&rt.isFunction(t.promise)?s:0,l=1===a?t:rt.Deferred(),u=function(t,n,i){return function(o){n[t]=this,i[t]=arguments.length>1?Q.call(arguments):o,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);s>o;o++)r[o]&&rt.isFunction(r[o].promise)?r[o].promise().progress(u(o,n,e)).done(u(o,i,r)).fail(l.reject):--a;return a||l.resolveWith(i,r),l.promise()}});var xt;rt.fn.ready=function(t){return rt.ready.promise().done(t),this},rt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?rt.readyWait++:rt.ready(!0)},ready:function(t){(t===!0?--rt.readyWait:rt.isReady)||(rt.isReady=!0,t!==!0&&--rt.readyWait>0||(xt.resolveWith(G,[rt]),rt.fn.triggerHandler&&(rt(G).triggerHandler("ready"),rt(G).off("ready"))))}}),rt.ready.promise=function(e){return xt||(xt=rt.Deferred(),"complete"===G.readyState||"loading"!==G.readyState&&!G.documentElement.doScroll?t.setTimeout(rt.ready):(G.addEventListener("DOMContentLoaded",s),t.addEventListener("load",s))),xt.promise(e)},rt.ready.promise();var Ct=function(t,e,n,i,o,r,s){var a=0,l=t.length,u=null==n;if("object"===rt.type(n)){o=!0;for(a in n)Ct(t,e,a,n[a],!0,r,s)}else if(void 0!==i&&(o=!0,rt.isFunction(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(rt(t),n)})),e))for(;l>a;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return o?t:u?e.call(t):l?e(t[0],n):r},Tt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};a.uid=1,a.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!Tt(t))return{};var e=t[this.expando];return e||(e={},Tt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[e]=n;else for(i in e)o[i]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?(i=this.get(t,e),void 0!==i?i:this.get(t,rt.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,o,r=t[this.expando];if(void 0!==r){if(void 0===e)this.register(t);else{rt.isArray(e)?i=e.concat(e.map(rt.camelCase)):(o=rt.camelCase(e),e in r?i=[e,o]:(i=o,i=i in r?[i]:i.match(kt)||[])),n=i.length;for(;n--;)delete r[i[n]]}(void 0===e||rt.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!rt.isEmptyObject(e)}};var $t=new a,Et=new a,St=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Dt=/[A-Z]/g;rt.extend({hasData:function(t){return Et.hasData(t)||$t.hasData(t)},data:function(t,e,n){return Et.access(t,e,n)},removeData:function(t,e){Et.remove(t,e)},_data:function(t,e,n){return $t.access(t,e,n)},_removeData:function(t,e){$t.remove(t,e)}}),rt.fn.extend({data:function(t,e){var n,i,o,r=this[0],s=r&&r.attributes;if(void 0===t){if(this.length&&(o=Et.get(r),1===r.nodeType&&!$t.get(r,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=rt.camelCase(i.slice(5)),l(r,i,o[i])));$t.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){Et.set(this,t)}):Ct(this,function(e){var n,i;if(r&&void 0===e){if(n=Et.get(r,t)||Et.get(r,t.replace(Dt,"-$&").toLowerCase()),void 0!==n)return n;if(i=rt.camelCase(t),n=Et.get(r,i),void 0!==n)return n;if(n=l(r,i,void 0),void 0!==n)return n}else i=rt.camelCase(t),this.each(function(){var n=Et.get(this,i);Et.set(this,i,e),t.indexOf("-")>-1&&void 0!==n&&Et.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Et.remove(this,t)})}}),rt.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=$t.get(t,e),n&&(!i||rt.isArray(n)?i=$t.access(t,e,rt.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=rt.queue(t,e),i=n.length,o=n.shift(),r=rt._queueHooks(t,e),s=function(){rt.dequeue(t,e)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,s,r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return $t.get(t,n)||$t.access(t,n,{empty:rt.Callbacks("once memory").add(function(){$t.remove(t,[e+"queue",n])})})}}),rt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?rt.queue(this[0],t):void 0===e?this:this.each(function(){var n=rt.queue(this,t,e);rt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&rt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){rt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=rt.Deferred(),r=this,s=this.length,a=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=$t.get(r[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),o.promise(e)}});var jt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Nt=new RegExp("^(?:([+-])=|)("+jt+")([a-z%]*)$","i"),At=["Top","Right","Bottom","Left"],Mt=function(t,e){return t=e||t,"none"===rt.css(t,"display")||!rt.contains(t.ownerDocument,t)},Lt=/^(?:checkbox|radio)$/i,qt=/<([\w:-]+)/,Ht=/^$|\/(?:java|ecma)script/i,Ot={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ot.optgroup=Ot.option,Ot.tbody=Ot.tfoot=Ot.colgroup=Ot.caption=Ot.thead,Ot.th=Ot.td;var Pt=/<|&#?\w+;/;!function(){var t=G.createDocumentFragment(),e=t.appendChild(G.createElement("div")),n=G.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),it.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",it.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ut=/^key/,It=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ft=/^([^.]*)(?:\.(.+)|)/;rt.event={global:{},add:function(t,e,n,i,o){var r,s,a,l,u,c,d,f,h,p,g,m=$t.get(t);if(m)for(n.handler&&(r=n,n=r.handler,o=r.selector),n.guid||(n.guid=rt.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(e){return"undefined"!=typeof rt&&rt.event.triggered!==e.type?rt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(kt)||[""],u=e.length;u--;)a=Ft.exec(e[u])||[],h=g=a[1],p=(a[2]||"").split(".").sort(),h&&(d=rt.event.special[h]||{},h=(o?d.delegateType:d.bindType)||h,d=rt.event.special[h]||{},c=rt.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&rt.expr.match.needsContext.test(o),namespace:p.join(".")},r),(f=l[h])||(f=l[h]=[],f.delegateCount=0,d.setup&&d.setup.call(t,i,p,s)!==!1||t.addEventListener&&t.addEventListener(h,s)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,c):f.push(c),rt.event.global[h]=!0)},remove:function(t,e,n,i,o){var r,s,a,l,u,c,d,f,h,p,g,m=$t.hasData(t)&&$t.get(t);if(m&&(l=m.events)){for(e=(e||"").match(kt)||[""],u=e.length;u--;)if(a=Ft.exec(e[u])||[],h=g=a[1],p=(a[2]||"").split(".").sort(),h){for(d=rt.event.special[h]||{},h=(i?d.delegateType:d.bindType)||h,f=l[h]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=f.length;r--;)c=f[r],!o&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(f.splice(r,1),c.selector&&f.delegateCount--,d.remove&&d.remove.call(t,c));s&&!f.length&&(d.teardown&&d.teardown.call(t,p,m.handle)!==!1||rt.removeEvent(t,h,m.handle),delete l[h])}else for(h in l)rt.event.remove(t,h+e[u],n,i,!0);rt.isEmptyObject(l)&&$t.remove(t,"handle events")}},dispatch:function(t){t=rt.event.fix(t);var e,n,i,o,r,s=[],a=Q.call(arguments),l=($t.get(this,"events")||{})[t.type]||[],u=rt.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,t)!==!1){for(s=rt.event.handlers.call(this,t,l),e=0;(o=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(r.namespace)||(t.handleObj=r,t.data=r.data,i=((rt.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(i=[],n=0;a>n;n++)r=e[n],o=r.selector+" ",void 0===i[o]&&(i[o]=r.needsContext?rt(o,this).index(l)>-1:rt.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,r=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||G,i=n.documentElement,o=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[rt.expando])return t;var e,n,i,o=t.type,r=t,s=this.fixHooks[o];for(s||(this.fixHooks[o]=s=It.test(o)?this.mouseHooks:Ut.test(o)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new rt.Event(r),e=i.length;e--;)n=i[e],t[n]=r[n];return t.target||(t.target=G),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,r):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==g()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===g()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&rt.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return rt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},rt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},rt.Event=function(t,e){return this instanceof rt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?h:p):this.type=t,e&&rt.extend(this,e),this.timeStamp=t&&t.timeStamp||rt.now(),void(this[rt.expando]=!0)):new rt.Event(t,e)},rt.Event.prototype={constructor:rt.Event,isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=h,t&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=h,t&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=h,t&&t.stopImmediatePropagation(),this.stopPropagation()}},rt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){rt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;return o&&(o===i||rt.contains(i,o))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),rt.fn.extend({on:function(t,e,n,i){return m(this,t,e,n,i)},one:function(t,e,n,i){return m(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,rt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=p),this.each(function(){rt.event.remove(this,t,n,e)})}});var Rt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Wt=/<script|<style|<link/i,_t=/checked\s*(?:[^=]|=\s*.checked.)/i,zt=/^true\/(.*)/,Bt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;rt.extend({htmlPrefilter:function(t){return t.replace(Rt,"<$1></$2>")},clone:function(t,e,n){var i,o,r,s,a=t.cloneNode(!0),l=rt.contains(t.ownerDocument,t);if(!(it.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||rt.isXMLDoc(t)))for(s=c(a),r=c(t),i=0,o=r.length;o>i;i++)k(r[i],s[i]);if(e)if(n)for(r=r||c(t),s=s||c(a),i=0,o=r.length;o>i;i++)w(r[i],s[i]);else w(t,a);return s=c(a,"script"),
s.length>0&&d(s,!l&&c(t,"script")),a},cleanData:function(t){for(var e,n,i,o=rt.event.special,r=0;void 0!==(n=t[r]);r++)if(Tt(n)){if(e=n[$t.expando]){if(e.events)for(i in e.events)o[i]?rt.event.remove(n,i):rt.removeEvent(n,i,e.handle);n[$t.expando]=void 0}n[Et.expando]&&(n[Et.expando]=void 0)}}}),rt.fn.extend({domManip:x,detach:function(t){return C(this,t,!0)},remove:function(t){return C(this,t)},text:function(t){return Ct(this,function(t){return void 0===t?rt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return x(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.appendChild(t)}})},prepend:function(){return x(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return x(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return x(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(rt.cleanData(c(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return rt.clone(this,t,e)})},html:function(t){return Ct(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Wt.test(t)&&!Ot[(qt.exec(t)||["",""])[1].toLowerCase()]){t=rt.htmlPrefilter(t);try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(rt.cleanData(c(e,!1)),e.innerHTML=t);e=0}catch(o){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return x(this,arguments,function(e){var n=this.parentNode;rt.inArray(this,t)<0&&(rt.cleanData(c(this)),n&&n.replaceChild(e,this))},t)}}),rt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){rt.fn[t]=function(t){for(var n,i=[],o=rt(t),r=o.length-1,s=0;r>=s;s++)n=s===r?this:this.clone(!0),rt(o[s])[e](n),K.apply(i,n.get());return this.pushStack(i)}});var Xt,Vt={HTML:"block",BODY:"block"},Yt=/^margin/,Gt=new RegExp("^("+jt+")(?!px)[a-z%]+$","i"),Qt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Jt=function(t,e,n,i){var o,r,s={};for(r in e)s[r]=t.style[r],t.style[r]=e[r];o=n.apply(t,i||[]);for(r in e)t.style[r]=s[r];return o},Kt=G.documentElement;!function(){function e(){a.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Kt.appendChild(s);var e=t.getComputedStyle(a);n="1%"!==e.top,r="2px"===e.marginLeft,i="4px"===e.width,a.style.marginRight="50%",o="4px"===e.marginRight,Kt.removeChild(s)}var n,i,o,r,s=G.createElement("div"),a=G.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",it.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),rt.extend(it,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},pixelMarginRight:function(){return null==i&&e(),o},reliableMarginLeft:function(){return null==i&&e(),r},reliableMarginRight:function(){var e,n=a.appendChild(G.createElement("div"));return n.style.cssText=a.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",a.style.width="1px",Kt.appendChild(s),e=!parseFloat(t.getComputedStyle(n).marginRight),Kt.removeChild(s),a.removeChild(n),e}}))}();var Zt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"},ne=["Webkit","O","Moz","ms"],ie=G.createElement("div").style;rt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=E(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,s,a=rt.camelCase(e),l=t.style;return e=rt.cssProps[a]||(rt.cssProps[a]=D(a)||a),s=rt.cssHooks[e]||rt.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(o=s.get(t,!1,i))?o:l[e]:(r=typeof n,"string"===r&&(o=Nt.exec(n))&&o[1]&&(n=u(t,e,o),r="number"),null!=n&&n===n&&("number"===r&&(n+=o&&o[3]||(rt.cssNumber[a]?"":"px")),it.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n)),void 0)}},css:function(t,e,n,i){var o,r,s,a=rt.camelCase(e);return e=rt.cssProps[a]||(rt.cssProps[a]=D(a)||a),s=rt.cssHooks[e]||rt.cssHooks[a],s&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=E(t,e,i)),"normal"===o&&e in ee&&(o=ee[e]),""===n||n?(r=parseFloat(o),n===!0||isFinite(r)?r||0:o):o}}),rt.each(["height","width"],function(t,e){rt.cssHooks[e]={get:function(t,n,i){return n?Zt.test(rt.css(t,"display"))&&0===t.offsetWidth?Jt(t,te,function(){return A(t,e,i)}):A(t,e,i):void 0},set:function(t,n,i){var o,r=i&&Qt(t),s=i&&N(t,e,i,"border-box"===rt.css(t,"boxSizing",!1,r),r);return s&&(o=Nt.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=rt.css(t,e)),j(t,n,s)}}}),rt.cssHooks.marginLeft=S(it.reliableMarginLeft,function(t,e){return e?(parseFloat(E(t,"marginLeft"))||t.getBoundingClientRect().left-Jt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px":void 0}),rt.cssHooks.marginRight=S(it.reliableMarginRight,function(t,e){return e?Jt(t,{display:"inline-block"},E,[t,"marginRight"]):void 0}),rt.each({margin:"",padding:"",border:"Width"},function(t,e){rt.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];4>i;i++)o[t+At[i]+e]=r[i]||r[i-2]||r[0];return o}},Yt.test(t)||(rt.cssHooks[t+e].set=j)}),rt.fn.extend({css:function(t,e){return Ct(this,function(t,e,n){var i,o,r={},s=0;if(rt.isArray(e)){for(i=Qt(t),o=e.length;o>s;s++)r[e[s]]=rt.css(t,e[s],!1,i);return r}return void 0!==n?rt.style(t,e,n):rt.css(t,e)},t,e,arguments.length>1)},show:function(){return M(this,!0)},hide:function(){return M(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Mt(this)?rt(this).show():rt(this).hide()})}}),rt.Tween=L,L.prototype={constructor:L,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||rt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(rt.cssNumber[n]?"":"px")},cur:function(){var t=L.propHooks[this.prop];return t&&t.get?t.get(this):L.propHooks._default.get(this)},run:function(t){var e,n=L.propHooks[this.prop];return this.options.duration?this.pos=e=rt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):L.propHooks._default.set(this),this}},L.prototype.init.prototype=L.prototype,L.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=rt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){rt.fx.step[t.prop]?rt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[rt.cssProps[t.prop]]&&!rt.cssHooks[t.prop]?t.elem[t.prop]=t.now:rt.style(t.elem,t.prop,t.now+t.unit)}}},L.propHooks.scrollTop=L.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},rt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},rt.fx=L.prototype.init,rt.fx.step={};var oe,re,se=/^(?:toggle|show|hide)$/,ae=/queueHooks$/;rt.Animation=rt.extend(I,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return u(n.elem,t,Nt.exec(e),n),n}]},tweener:function(t,e){rt.isFunction(t)?(e=t,t=["*"]):t=t.match(kt);for(var n,i=0,o=t.length;o>i;i++)n=t[i],I.tweeners[n]=I.tweeners[n]||[],I.tweeners[n].unshift(e)},prefilters:[P],prefilter:function(t,e){e?I.prefilters.unshift(t):I.prefilters.push(t)}}),rt.speed=function(t,e,n){var i=t&&"object"==typeof t?rt.extend({},t):{complete:n||!n&&e||rt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!rt.isFunction(e)&&e};return i.duration=rt.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in rt.fx.speeds?rt.fx.speeds[i.duration]:rt.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){rt.isFunction(i.old)&&i.old.call(this),i.queue&&rt.dequeue(this,i.queue)},i},rt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Mt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=rt.isEmptyObject(t),r=rt.speed(e,n,i),s=function(){var e=I(this,rt.extend({},t),r);(o||$t.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||r.queue===!1?this.each(s):this.queue(r.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=rt.timers,s=$t.get(this);if(o)s[o]&&s[o].stop&&i(s[o]);else for(o in s)s[o]&&s[o].stop&&ae.test(o)&&i(s[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||rt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=$t.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=rt.timers,s=i?i.length:0;for(n.finish=!0,rt.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),rt.each(["toggle","show","hide"],function(t,e){var n=rt.fn[e];rt.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(H(e,!0),t,i,o)}}),rt.each({slideDown:H("show"),slideUp:H("hide"),slideToggle:H("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){rt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),rt.timers=[],rt.fx.tick=function(){var t,e=0,n=rt.timers;for(oe=rt.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||rt.fx.stop(),oe=void 0},rt.fx.timer=function(t){rt.timers.push(t),t()?rt.fx.start():rt.timers.pop()},rt.fx.interval=13,rt.fx.start=function(){re||(re=t.setInterval(rt.fx.tick,rt.fx.interval))},rt.fx.stop=function(){t.clearInterval(re),re=null},rt.fx.speeds={slow:600,fast:200,_default:400},rt.fn.delay=function(e,n){return e=rt.fx?rt.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})},function(){var t=G.createElement("input"),e=G.createElement("select"),n=e.appendChild(G.createElement("option"));t.type="checkbox",it.checkOn=""!==t.value,it.optSelected=n.selected,e.disabled=!0,it.optDisabled=!n.disabled,t=G.createElement("input"),t.value="t",t.type="radio",it.radioValue="t"===t.value}();var le,ue=rt.expr.attrHandle;rt.fn.extend({attr:function(t,e){return Ct(this,rt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){rt.removeAttr(this,t)})}}),rt.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return"undefined"==typeof t.getAttribute?rt.prop(t,e,n):(1===r&&rt.isXMLDoc(t)||(e=e.toLowerCase(),o=rt.attrHooks[e]||(rt.expr.match.bool.test(e)?le:void 0)),void 0!==n?null===n?void rt.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:(i=rt.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!it.radioValue&&"radio"===e&&rt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(kt);if(r&&1===t.nodeType)for(;n=r[o++];)i=rt.propFix[n]||n,rt.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),le={set:function(t,e,n){return e===!1?rt.removeAttr(t,n):t.setAttribute(n,n),n}},rt.each(rt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ue[e]||rt.find.attr;ue[e]=function(t,e,i){var o,r;return i||(r=ue[e],ue[e]=o,o=null!=n(t,e,i)?e.toLowerCase():null,ue[e]=r),o}});var ce=/^(?:input|select|textarea|button)$/i,de=/^(?:a|area)$/i;rt.fn.extend({prop:function(t,e){return Ct(this,rt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[rt.propFix[t]||t]})}}),rt.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&rt.isXMLDoc(t)||(e=rt.propFix[e]||e,o=rt.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=rt.find.attr(t,"tabindex");return e?parseInt(e,10):ce.test(t.nodeName)||de.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),it.optSelected||(rt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),rt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){rt.propFix[this.toLowerCase()]=this});var fe=/[\t\r\n\f]/g;rt.fn.extend({addClass:function(t){var e,n,i,o,r,s,a,l=0;if(rt.isFunction(t))return this.each(function(e){rt(this).addClass(t.call(this,e,F(this)))});if("string"==typeof t&&t)for(e=t.match(kt)||[];n=this[l++];)if(o=F(n),i=1===n.nodeType&&(" "+o+" ").replace(fe," ")){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a=rt.trim(i),o!==a&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,s,a,l=0;if(rt.isFunction(t))return this.each(function(e){rt(this).removeClass(t.call(this,e,F(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(kt)||[];n=this[l++];)if(o=F(n),i=1===n.nodeType&&(" "+o+" ").replace(fe," ")){for(s=0;r=e[s++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");a=rt.trim(i),o!==a&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):rt.isFunction(t)?this.each(function(n){rt(this).toggleClass(t.call(this,n,F(this),e),e)}):this.each(function(){var e,i,o,r;if("string"===n)for(i=0,o=rt(this),r=t.match(kt)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||(e=F(this),e&&$t.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":$t.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+F(n)+" ").replace(fe," ").indexOf(e)>-1)return!0;return!1}});var he=/\r/g;rt.fn.extend({val:function(t){var e,n,i,o=this[0];{if(arguments.length)return i=rt.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(o=i?t.call(this,n,rt(this).val()):t,null==o?o="":"number"==typeof o?o+="":rt.isArray(o)&&(o=rt.map(o,function(t){return null==t?"":t+""})),e=rt.valHooks[this.type]||rt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return e=rt.valHooks[o.type]||rt.valHooks[o.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(he,""):null==n?"":n)}}}),rt.extend({valHooks:{option:{get:function(t){return rt.trim(t.value)}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||0>o,s=r?null:[],a=r?o+1:i.length,l=0>o?a:r?o:0;a>l;l++)if(n=i[l],(n.selected||l===o)&&(it.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!rt.nodeName(n.parentNode,"optgroup"))){if(e=rt(n).val(),r)return e;s.push(e)}return s},set:function(t,e){for(var n,i,o=t.options,r=rt.makeArray(e),s=o.length;s--;)i=o[s],(i.selected=rt.inArray(rt.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),rt.each(["radio","checkbox"],function(){rt.valHooks[this]={set:function(t,e){return rt.isArray(e)?t.checked=rt.inArray(rt(t).val(),e)>-1:void 0}},it.checkOn||(rt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var pe=/^(?:focusinfocus|focusoutblur)$/;rt.extend(rt.event,{trigger:function(e,n,i,o){var r,s,a,l,u,c,d,f=[i||G],h=nt.call(e,"type")?e.type:e,p=nt.call(e,"namespace")?e.namespace.split("."):[];if(s=a=i=i||G,3!==i.nodeType&&8!==i.nodeType&&!pe.test(h+rt.event.triggered)&&(h.indexOf(".")>-1&&(p=h.split("."),h=p.shift(),p.sort()),u=h.indexOf(":")<0&&"on"+h,e=e[rt.expando]?e:new rt.Event(h,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:rt.makeArray(n,[e]),d=rt.event.special[h]||{},o||!d.trigger||d.trigger.apply(i,n)!==!1)){if(!o&&!d.noBubble&&!rt.isWindow(i)){for(l=d.delegateType||h,pe.test(l+h)||(s=s.parentNode);s;s=s.parentNode)f.push(s),a=s;a===(i.ownerDocument||G)&&f.push(a.defaultView||a.parentWindow||t)}for(r=0;(s=f[r++])&&!e.isPropagationStopped();)e.type=r>1?l:d.bindType||h,c=($t.get(s,"events")||{})[e.type]&&$t.get(s,"handle"),c&&c.apply(s,n),c=u&&s[u],c&&c.apply&&Tt(s)&&(e.result=c.apply(s,n),e.result===!1&&e.preventDefault());return e.type=h,o||e.isDefaultPrevented()||d._default&&d._default.apply(f.pop(),n)!==!1||!Tt(i)||u&&rt.isFunction(i[h])&&!rt.isWindow(i)&&(a=i[u],a&&(i[u]=null),rt.event.triggered=h,i[h](),rt.event.triggered=void 0,a&&(i[u]=a)),e.result}},simulate:function(t,e,n){var i=rt.extend(new rt.Event,n,{type:t,isSimulated:!0});rt.event.trigger(i,null,e),i.isDefaultPrevented()&&n.preventDefault()}}),rt.fn.extend({trigger:function(t,e){return this.each(function(){rt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?rt.event.trigger(t,e,n,!0):void 0}}),rt.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){rt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),rt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),it.focusin="onfocusin"in t,it.focusin||rt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){rt.event.simulate(e,t.target,rt.event.fix(t))};rt.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=$t.access(i,e);o||i.addEventListener(t,n,!0),$t.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=$t.access(i,e)-1;o?$t.access(i,e,o):(i.removeEventListener(t,n,!0),$t.remove(i,e))}}});var ge=t.location,me=rt.now(),ve=/\?/;rt.parseJSON=function(t){return JSON.parse(t+"")},rt.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(i){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||rt.error("Invalid XML: "+e),n};var ye=/#.*$/,be=/([?&])_=[^&]*/,we=/^(.*?):[ \t]*([^\r\n]*)$/gm,ke=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,xe=/^(?:GET|HEAD)$/,Ce=/^\/\//,Te={},$e={},Ee="*/".concat("*"),Se=G.createElement("a");Se.href=ge.href,rt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ge.href,type:"GET",isLocal:ke.test(ge.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ee,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":rt.parseJSON,"text xml":rt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?_(_(t,rt.ajaxSettings),e):_(rt.ajaxSettings,t)},ajaxPrefilter:R(Te),ajaxTransport:R($e),ajax:function(e,n){function i(e,n,i,a){var u,d,y,b,k,C=n;2!==w&&(w=2,l&&t.clearTimeout(l),o=void 0,s=a||"",x.readyState=e>0?4:0,u=e>=200&&300>e||304===e,i&&(b=z(f,x,i)),b=B(f,b,x,u),u?(f.ifModified&&(k=x.getResponseHeader("Last-Modified"),k&&(rt.lastModified[r]=k),k=x.getResponseHeader("etag"),k&&(rt.etag[r]=k)),204===e||"HEAD"===f.type?C="nocontent":304===e?C="notmodified":(C=b.state,d=b.data,y=b.error,u=!y)):(y=C,!e&&C||(C="error",0>e&&(e=0))),x.status=e,x.statusText=(n||C)+"",u?g.resolveWith(h,[d,C,x]):g.rejectWith(h,[x,C,y]),x.statusCode(v),v=void 0,c&&p.trigger(u?"ajaxSuccess":"ajaxError",[x,f,u?d:y]),m.fireWith(h,[x,C]),c&&(p.trigger("ajaxComplete",[x,f]),--rt.active||rt.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var o,r,s,a,l,u,c,d,f=rt.ajaxSetup({},n),h=f.context||f,p=f.context&&(h.nodeType||h.jquery)?rt(h):rt.event,g=rt.Deferred(),m=rt.Callbacks("once memory"),v=f.statusCode||{},y={},b={},w=0,k="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!a)for(a={};e=we.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=b[n]=b[n]||t,y[t]=e),this},overrideMimeType:function(t){return w||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>w)for(e in t)v[e]=[v[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||k;return o&&o.abort(e),i(0,e),this}};if(g.promise(x).complete=m.add,x.success=x.done,x.error=x.fail,f.url=((e||f.url||ge.href)+"").replace(ye,"").replace(Ce,ge.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=rt.trim(f.dataType||"*").toLowerCase().match(kt)||[""],null==f.crossDomain){u=G.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Se.protocol+"//"+Se.host!=u.protocol+"//"+u.host}catch(C){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=rt.param(f.data,f.traditional)),W(Te,f,n,x),2===w)return x;c=rt.event&&f.global,c&&0===rt.active++&&rt.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!xe.test(f.type),r=f.url,f.hasContent||(f.data&&(r=f.url+=(ve.test(r)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=be.test(r)?r.replace(be,"$1_="+me++):r+(ve.test(r)?"&":"?")+"_="+me++)),f.ifModified&&(rt.lastModified[r]&&x.setRequestHeader("If-Modified-Since",rt.lastModified[r]),rt.etag[r]&&x.setRequestHeader("If-None-Match",rt.etag[r])),(f.data&&f.hasContent&&f.contentType!==!1||n.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ee+"; q=0.01":""):f.accepts["*"]);for(d in f.headers)x.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(f.beforeSend.call(h,x,f)===!1||2===w))return x.abort();k="abort";for(d in{success:1,error:1,complete:1})x[d](f[d]);if(o=W($e,f,n,x)){if(x.readyState=1,c&&p.trigger("ajaxSend",[x,f]),2===w)return x;f.async&&f.timeout>0&&(l=t.setTimeout(function(){x.abort("timeout")},f.timeout));try{w=1,o.send(y,i)}catch(C){if(!(2>w))throw C;i(-1,C)}}else i(-1,"No Transport");return x},getJSON:function(t,e,n){return rt.get(t,e,n,"json")},getScript:function(t,e){return rt.get(t,void 0,e,"script")}}),rt.each(["get","post"],function(t,e){rt[e]=function(t,n,i,o){return rt.isFunction(n)&&(o=o||i,i=n,n=void 0),rt.ajax(rt.extend({url:t,type:e,dataType:o,data:n,success:i},rt.isPlainObject(t)&&t))}}),rt._evalUrl=function(t){return rt.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},rt.fn.extend({wrapAll:function(t){var e;return rt.isFunction(t)?this.each(function(e){rt(this).wrapAll(t.call(this,e))}):(this[0]&&(e=rt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return rt.isFunction(t)?this.each(function(e){rt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=rt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=rt.isFunction(t);return this.each(function(n){rt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){rt.nodeName(this,"body")||rt(this).replaceWith(this.childNodes)}).end()}}),rt.expr.filters.hidden=function(t){return!rt.expr.filters.visible(t)},rt.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var De=/%20/g,je=/\[\]$/,Ne=/\r?\n/g,Ae=/^(?:submit|button|image|reset|file)$/i,Me=/^(?:input|select|textarea|keygen)/i;rt.param=function(t,e){var n,i=[],o=function(t,e){e=rt.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=rt.ajaxSettings&&rt.ajaxSettings.traditional),rt.isArray(t)||t.jquery&&!rt.isPlainObject(t))rt.each(t,function(){o(this.name,this.value)});else for(n in t)X(n,t[n],e,o);return i.join("&").replace(De,"+")},rt.fn.extend({serialize:function(){return rt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=rt.prop(this,"elements");return t?rt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!rt(this).is(":disabled")&&Me.test(this.nodeName)&&!Ae.test(t)&&(this.checked||!Lt.test(t))}).map(function(t,e){var n=rt(this).val();return null==n?null:rt.isArray(n)?rt.map(n,function(t){return{name:e.name,value:t.replace(Ne,"\r\n")}}):{name:e.name,value:n.replace(Ne,"\r\n")}}).get()}}),rt.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Le={0:200,1223:204},qe=rt.ajaxSettings.xhr();it.cors=!!qe&&"withCredentials"in qe,it.ajax=qe=!!qe,rt.ajaxTransport(function(e){var n,i;return it.cors||qe&&!e.crossDomain?{send:function(o,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(s in o)a.setRequestHeader(s,o[s]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Le[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(l){if(n)throw l}},abort:function(){n&&n()}}:void 0}),rt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return rt.globalEval(t),t}}}),rt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),rt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,o){e=rt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),G.head.appendChild(e[0])},abort:function(){n&&n()}}}});var He=[],Oe=/(=)\?(?=&|$)|\?\?/;rt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=He.pop()||rt.expando+"_"+me++;return this[t]=!0,t}}),rt.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,s,a=e.jsonp!==!1&&(Oe.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Oe.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(o=e.jsonpCallback=rt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Oe,"$1"+o):e.jsonp!==!1&&(e.url+=(ve.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return s||rt.error(o+" was not called"),s[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){s=arguments},i.always(function(){void 0===r?rt(t).removeProp(o):t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,He.push(o)),s&&rt.isFunction(r)&&r(s[0]),s=r=void 0}),"script"):void 0}),it.createHTMLDocument=function(){var t=G.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),rt.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||(it.createHTMLDocument?G.implementation.createHTMLDocument(""):G);var i=pt.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=f([t],e,o),o&&o.length&&rt(o).remove(),rt.merge([],i.childNodes))};var Pe=rt.fn.load;rt.fn.load=function(t,e,n){if("string"!=typeof t&&Pe)return Pe.apply(this,arguments);var i,o,r,s=this,a=t.indexOf(" ");return a>-1&&(i=rt.trim(t.slice(a)),t=t.slice(0,a)),rt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&rt.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?rt("<div>").append(rt.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(s,r||[t.responseText,e,t])})}),this},rt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){rt.fn[e]=function(t){return this.on(e,t)}}),rt.expr.filters.animated=function(t){return rt.grep(rt.timers,function(e){return t===e.elem}).length},rt.offset={setOffset:function(t,e,n){var i,o,r,s,a,l,u,c=rt.css(t,"position"),d=rt(t),f={};"static"===c&&(t.style.position="relative"),a=d.offset(),r=rt.css(t,"top"),l=rt.css(t,"left"),u=("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1,u?(i=d.position(),s=i.top,o=i.left):(s=parseFloat(r)||0,o=parseFloat(l)||0),rt.isFunction(e)&&(e=e.call(t,n,rt.extend({},a))),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+o),"using"in e?e.using.call(t,f):d.css(f)}},rt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){rt.offset.setOffset(this,t,e)});var e,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;if(r)return e=r.documentElement,rt.contains(e,i)?(o=i.getBoundingClientRect(),n=V(r),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}):o},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===rt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),rt.nodeName(t[0],"html")||(i=t.offset()),i.top+=rt.css(t[0],"borderTopWidth",!0),i.left+=rt.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-rt.css(n,"marginTop",!0),left:e.left-i.left-rt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===rt.css(t,"position");)t=t.offsetParent;return t||Kt})}}),rt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;rt.fn[t]=function(i){return Ct(this,function(t,i,o){var r=V(t);return void 0===o?r?r[e]:t[i]:void(r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o)},t,i,arguments.length)}}),rt.each(["top","left"],function(t,e){rt.cssHooks[e]=S(it.pixelPosition,function(t,n){return n?(n=E(t,e),Gt.test(n)?rt(t).position()[e]+"px":n):void 0})}),rt.each({Height:"height",Width:"width"},function(t,e){rt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){rt.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||o===!0?"margin":"border");return Ct(this,function(e,n,i){var o;return rt.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?rt.css(e,n,s):rt.style(e,n,i,s);
},e,r?i:void 0,r,null)}})}),rt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),rt.fn.andSelf=rt.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return rt});var Ue=t.jQuery,Ie=t.$;return rt.noConflict=function(e){return t.$===rt&&(t.$=Ie),e&&t.jQuery===rt&&(t.jQuery=Ue),rt},e||(t.jQuery=t.$=rt),rt}),function(t){if("function"==typeof define&&define.amd&&define("uikit",function(){var e=window.UIkit||t(window,window.jQuery,window.document);return e.load=function(t,n,i,o){var r,s=t.split(","),a=[],l=(o.config&&o.config.uikit&&o.config.uikit.base?o.config.uikit.base:"").replace(/\/+$/g,"");if(!l)throw new Error("Please define base path to UIkit in the requirejs config.");for(r=0;r<s.length;r+=1){var u=s[r].replace(/\./g,"/");a.push(l+"/components/"+u)}n(a,function(){i(e)})},e}),!window.jQuery)throw new Error("UIkit requires jQuery");window&&window.jQuery&&t(window,window.jQuery,window.document)}(function(t,e,n){"use strict";var i={},o=t.UIkit?Object.create(t.UIkit):void 0;if(i.version="2.25.0",i.noConflict=function(){return o&&(t.UIkit=o,e.UIkit=o,e.fn.uk=o.fn),i},i.prefix=function(t){return t},i.$=e,i.$doc=i.$(document),i.$win=i.$(window),i.$html=i.$("html"),i.support={},i.support.transition=function(){var t=function(){var t,e=n.body||n.documentElement,i={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(t in i)if(void 0!==e.style[t])return i[t]}();return t&&{end:t}}(),i.support.animation=function(){var t=function(){var t,e=n.body||n.documentElement,i={WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(t in i)if(void 0!==e.style[t])return i[t]}();return t&&{end:t}}(),function(){Date.now=Date.now||function(){return(new Date).getTime()};for(var t=["webkit","moz"],e=0;e<t.length&&!window.requestAnimationFrame;++e){var n=t[e];window.requestAnimationFrame=window[n+"RequestAnimationFrame"],window.cancelAnimationFrame=window[n+"CancelAnimationFrame"]||window[n+"CancelRequestAnimationFrame"]}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var i=0;window.requestAnimationFrame=function(t){var e=Date.now(),n=Math.max(i+16,e);return setTimeout(function(){t(i=n)},n-e)},window.cancelAnimationFrame=clearTimeout}}(),i.support.touch="ontouchstart"in document||t.DocumentTouch&&document instanceof t.DocumentTouch||t.navigator.msPointerEnabled&&t.navigator.msMaxTouchPoints>0||t.navigator.pointerEnabled&&t.navigator.maxTouchPoints>0||!1,i.support.mutationobserver=t.MutationObserver||t.WebKitMutationObserver||null,i.Utils={},i.Utils.isFullscreen=function(){return document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement||document.fullscreenElement||!1},i.Utils.str2json=function(t,e){try{return e?JSON.parse(t.replace(/([\$\w]+)\s*:/g,function(t,e){return'"'+e+'":'}).replace(/'([^']+)'/g,function(t,e){return'"'+e+'"'})):new Function("","var json = "+t+"; return JSON.parse(JSON.stringify(json));")()}catch(n){return!1}},i.Utils.debounce=function(t,e,n){var i;return function(){var o=this,r=arguments,s=function(){i=null,n||t.apply(o,r)},a=n&&!i;clearTimeout(i),i=setTimeout(s,e),a&&t.apply(o,r)}},i.Utils.removeCssRules=function(t){var e,n,i,o,r,s,a,l,u,c;t&&setTimeout(function(){try{for(c=document.styleSheets,o=0,a=c.length;a>o;o++){for(i=c[o],n=[],i.cssRules=i.cssRules,e=r=0,l=i.cssRules.length;l>r;e=++r)i.cssRules[e].type===CSSRule.STYLE_RULE&&t.test(i.cssRules[e].selectorText)&&n.unshift(e);for(s=0,u=n.length;u>s;s++)i.deleteRule(n[s])}}catch(d){}},0)},i.Utils.isInView=function(t,n){var o=e(t);if(!o.is(":visible"))return!1;var r=i.$win.scrollLeft(),s=i.$win.scrollTop(),a=o.offset(),l=a.left,u=a.top;return n=e.extend({topoffset:0,leftoffset:0},n),u+o.height()>=s&&u-n.topoffset<=s+i.$win.height()&&l+o.width()>=r&&l-n.leftoffset<=r+i.$win.width()},i.Utils.checkDisplay=function(t,n){var o=i.$("[data-uk-margin], [data-uk-grid-match], [data-uk-grid-margin], [data-uk-check-display]",t||document);return t&&!o.length&&(o=e(t)),o.trigger("display.uk.check"),n&&("string"!=typeof n&&(n='[class*="uk-animation-"]'),o.find(n).each(function(){var t=i.$(this),e=t.attr("class"),n=e.match(/uk\-animation\-(.+)/);t.removeClass(n[0]).width(),t.addClass(n[0])})),o},i.Utils.options=function(t){if("string"!=e.type(t))return t;-1!=t.indexOf(":")&&"}"!=t.trim().substr(-1)&&(t="{"+t+"}");var n=t?t.indexOf("{"):-1,o={};if(-1!=n)try{o=i.Utils.str2json(t.substr(n))}catch(r){}return o},i.Utils.animate=function(t,n){var o=e.Deferred();return t=i.$(t),t.css("display","none").addClass(n).one(i.support.animation.end,function(){t.removeClass(n),o.resolve()}),t.css("display",""),o.promise()},i.Utils.uid=function(t){return(t||"id")+(new Date).getTime()+"RAND"+Math.ceil(1e5*Math.random())},i.Utils.template=function(t,e){for(var n,i,o,r,s=t.replace(/\n/g,"\\n").replace(/\{\{\{\s*(.+?)\s*\}\}\}/g,"{{!$1}}").split(/(\{\{\s*(.+?)\s*\}\})/g),a=0,l=[],u=0;a<s.length;){if(n=s[a],n.match(/\{\{\s*(.+?)\s*\}\}/))switch(a+=1,n=s[a],i=n[0],o=n.substring(n.match(/^(\^|\#|\!|\~|\:)/)?1:0),i){case"~":l.push("for(var $i=0;$i<"+o+".length;$i++) { var $item = "+o+"[$i];"),u++;break;case":":l.push("for(var $key in "+o+") { var $val = "+o+"[$key];"),u++;break;case"#":l.push("if("+o+") {"),u++;break;case"^":l.push("if(!"+o+") {"),u++;break;case"/":l.push("}"),u--;break;case"!":l.push("__ret.push("+o+");");break;default:l.push("__ret.push(escape("+o+"));")}else l.push("__ret.push('"+n.replace(/\'/g,"\\'")+"');");a+=1}return r=new Function("$data",["var __ret = [];","try {","with($data){",u?'__ret = ["Not all blocks are closed correctly."]':l.join(""),"};","}catch(e){__ret = [e.message];}",'return __ret.join("").replace(/\\n\\n/g, "\\n");',"function escape(html) { return String(html).replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');}"].join("\n")),e?r(e):r},i.Utils.events={},i.Utils.events.click=i.support.touch?"tap":"click",t.UIkit=i,i.fn=function(t,n){var o=arguments,r=t.match(/^([a-z\-]+)(?:\.([a-z]+))?/i),s=r[1],a=r[2];return i[s]?this.each(function(){var t=e(this),r=t.data(s);r||t.data(s,r=i[s](this,a?void 0:n)),a&&r[a].apply(r,Array.prototype.slice.call(o,1))}):(e.error("UIkit component ["+s+"] does not exist."),this)},e.UIkit=i,e.fn.uk=i.fn,i.langdirection="rtl"==i.$html.attr("dir")?"right":"left",i.components={},i.component=function(t,n){var o=function(n,r){var s=this;return this.UIkit=i,this.element=n?i.$(n):null,this.options=e.extend(!0,{},this.defaults,r),this.plugins={},this.element&&this.element.data(t,this),this.init(),(this.options.plugins.length?this.options.plugins:Object.keys(o.plugins)).forEach(function(t){o.plugins[t].init&&(o.plugins[t].init(s),s.plugins[t]=!0)}),this.trigger("init.uk.component",[t,this]),this};return o.plugins={},e.extend(!0,o.prototype,{defaults:{plugins:[]},boot:function(){},init:function(){},on:function(t,e,n){return i.$(this.element||this).on(t,e,n)},one:function(t,e,n){return i.$(this.element||this).one(t,e,n)},off:function(t){return i.$(this.element||this).off(t)},trigger:function(t,e){return i.$(this.element||this).trigger(t,e)},find:function(t){return i.$(this.element?this.element:[]).find(t)},proxy:function(t,e){var n=this;e.split(" ").forEach(function(e){n[e]||(n[e]=function(){return t[e].apply(t,arguments)})})},mixin:function(t,e){var n=this;e.split(" ").forEach(function(e){n[e]||(n[e]=t[e].bind(n))})},option:function(){return 1==arguments.length?this.options[arguments[0]]||void 0:void(2==arguments.length&&(this.options[arguments[0]]=arguments[1]))}},n),this.components[t]=o,this[t]=function(){var n,o;if(arguments.length)switch(arguments.length){case 1:"string"==typeof arguments[0]||arguments[0].nodeType||arguments[0]instanceof jQuery?n=e(arguments[0]):o=arguments[0];break;case 2:n=e(arguments[0]),o=arguments[1]}return n&&n.data(t)?n.data(t):new i.components[t](n,o)},i.domready&&i.component.boot(t),o},i.plugin=function(t,e,n){this.components[t].plugins[e]=n},i.component.boot=function(t){i.components[t].prototype&&i.components[t].prototype.boot&&!i.components[t].booted&&(i.components[t].prototype.boot.apply(i,[]),i.components[t].booted=!0)},i.component.bootComponents=function(){for(var t in i.components)i.component.boot(t)},i.domObservers=[],i.domready=!1,i.ready=function(t){i.domObservers.push(t),i.domready&&t(document)},i.on=function(t,e,n){return t&&t.indexOf("ready.uk.dom")>-1&&i.domready&&e.apply(i.$doc),i.$doc.on(t,e,n)},i.one=function(t,e,n){return t&&t.indexOf("ready.uk.dom")>-1&&i.domready?(e.apply(i.$doc),i.$doc):i.$doc.one(t,e,n)},i.trigger=function(t,e){return i.$doc.trigger(t,e)},i.domObserve=function(t,e){i.support.mutationobserver&&(e=e||function(){},i.$(t).each(function(){var t=this,n=i.$(t);if(!n.data("observer"))try{var o=new i.support.mutationobserver(i.Utils.debounce(function(i){e.apply(t,[]),n.trigger("changed.uk.dom")},50));o.observe(t,{childList:!0,subtree:!0}),n.data("observer",o)}catch(r){}}))},i.init=function(t){t=t||document,i.domObservers.forEach(function(e){e(t)})},i.on("domready.uk.dom",function(){i.init(),i.domready&&i.Utils.checkDisplay()}),document.addEventListener("DOMContentLoaded",function(){var t=function(){i.$body=i.$("body"),i.ready(function(t){i.domObserve("[data-uk-observe]")}),i.on("changed.uk.dom",function(t){i.init(t.target),i.Utils.checkDisplay(t.target)}),i.trigger("beforeready.uk.dom"),i.component.bootComponents(),requestAnimationFrame(function(){var t={dir:{x:0,y:0},x:window.pageXOffset,y:window.pageYOffset},e=function(){var n=window.pageXOffset,o=window.pageYOffset;t.x==n&&t.y==o||(n!=t.x?t.dir.x=n>t.x?1:-1:t.dir.x=0,o!=t.y?t.dir.y=o>t.y?1:-1:t.dir.y=0,t.x=n,t.y=o,i.$doc.trigger("scrolling.uk.document",[{dir:{x:t.dir.x,y:t.dir.y},x:n,y:o}])),requestAnimationFrame(e)};return i.support.touch&&i.$html.on("touchmove touchend MSPointerMove MSPointerUp pointermove pointerup",e),(t.x||t.y)&&e(),e}()),i.trigger("domready.uk.dom"),i.support.touch&&navigator.userAgent.match(/(iPad|iPhone|iPod)/g)&&i.$win.on("load orientationchange resize",i.Utils.debounce(function(){var t=function(){return e(".uk-height-viewport").css("height",window.innerHeight),t};return t()}(),100)),i.trigger("afterready.uk.dom"),i.domready=!0};return"complete"!=document.readyState&&"interactive"!=document.readyState||setTimeout(t),t}()),i.$html.addClass(i.support.touch?"uk-touch":"uk-notouch"),i.support.touch){var r,s=!1,a="uk-hover",l=".uk-overlay, .uk-overlay-hover, .uk-overlay-toggle, .uk-animation-hover, .uk-has-hover";i.$html.on("mouseenter touchstart MSPointerDown pointerdown",l,function(){s&&e("."+a).removeClass(a),s=e(this).addClass(a)}).on("mouseleave touchend MSPointerUp pointerup",function(t){r=e(t.target).parents(l),s&&s.not(r).removeClass(a)})}return i}),function(t){function e(t,e,n,i){return Math.abs(t-e)>=Math.abs(n-i)?t-e>0?"Left":"Right":n-i>0?"Up":"Down"}function n(){u=null,d.last&&(void 0!==d.el&&d.el.trigger("longTap"),d={})}function i(){u&&clearTimeout(u),u=null}function o(){s&&clearTimeout(s),a&&clearTimeout(a),l&&clearTimeout(l),u&&clearTimeout(u),s=a=l=u=null,d={}}function r(t){return t.pointerType==t.MSPOINTER_TYPE_TOUCH&&t.isPrimary}if(!t.fn.swipeLeft){var s,a,l,u,c,d={},f=750;t(function(){var h,p,g,m=0,v=0;"MSGesture"in window&&(c=new MSGesture,c.target=document.body),t(document).on("MSGestureEnd gestureend",function(t){var e=t.originalEvent.velocityX>1?"Right":t.originalEvent.velocityX<-1?"Left":t.originalEvent.velocityY>1?"Down":t.originalEvent.velocityY<-1?"Up":null;e&&void 0!==d.el&&(d.el.trigger("swipe"),d.el.trigger("swipe"+e))}).on("touchstart MSPointerDown pointerdown",function(e){("MSPointerDown"!=e.type||r(e.originalEvent))&&(g="MSPointerDown"==e.type||"pointerdown"==e.type?e:e.originalEvent.touches[0],h=Date.now(),p=h-(d.last||h),d.el=t("tagName"in g.target?g.target:g.target.parentNode),s&&clearTimeout(s),d.x1=g.pageX,d.y1=g.pageY,p>0&&250>=p&&(d.isDoubleTap=!0),d.last=h,u=setTimeout(n,f),!c||"MSPointerDown"!=e.type&&"pointerdown"!=e.type&&"touchstart"!=e.type||c.addPointer(e.originalEvent.pointerId))}).on("touchmove MSPointerMove pointermove",function(t){("MSPointerMove"!=t.type||r(t.originalEvent))&&(g="MSPointerMove"==t.type||"pointermove"==t.type?t:t.originalEvent.touches[0],i(),d.x2=g.pageX,d.y2=g.pageY,m+=Math.abs(d.x1-d.x2),v+=Math.abs(d.y1-d.y2))}).on("touchend MSPointerUp pointerup",function(n){("MSPointerUp"!=n.type||r(n.originalEvent))&&(i(),d.x2&&Math.abs(d.x1-d.x2)>30||d.y2&&Math.abs(d.y1-d.y2)>30?l=setTimeout(function(){void 0!==d.el&&(d.el.trigger("swipe"),d.el.trigger("swipe"+e(d.x1,d.x2,d.y1,d.y2))),d={}},0):"last"in d&&(isNaN(m)||30>m&&30>v?a=setTimeout(function(){var e=t.Event("tap");e.cancelTouch=o,void 0!==d.el&&d.el.trigger(e),d.isDoubleTap?(void 0!==d.el&&d.el.trigger("doubleTap"),d={}):s=setTimeout(function(){s=null,void 0!==d.el&&d.el.trigger("singleTap"),d={}},250)},0):d={},m=v=0))}).on("touchcancel MSPointerCancel",o),t(window).on("scroll",o)}),["swipe","swipeLeft","swipeRight","swipeUp","swipeDown","doubleTap","tap","singleTap","longTap"].forEach(function(e){t.fn[e]=function(n){return t(this).on(e,n)}})}}(jQuery),function(t){"use strict";var e=[];t.component("stackMargin",{defaults:{cls:"uk-margin-small-top",rowfirst:!1},boot:function(){t.ready(function(e){t.$("[data-uk-margin]",e).each(function(){var e=t.$(this);e.data("stackMargin")||t.stackMargin(e,t.Utils.options(e.attr("data-uk-margin")))})})},init:function(){var n=this;t.$win.on("resize orientationchange",function(){var e=function(){n.process()};return t.$(function(){e(),t.$win.on("load",e)}),t.Utils.debounce(e,20)}()),t.$html.on("changed.uk.dom",function(t){n.process()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.process()}.bind(this)),e.push(this)},process:function(){var e=this,n=this.element.children();if(t.Utils.stackMargin(n,this.options),!this.options.rowfirst)return this;var i=n.removeClass(this.options.rowfirst).filter(":visible").first().position();return i&&n.each(function(){t.$(this)[t.$(this).position().left==i.left?"addClass":"removeClass"](e.options.rowfirst)}),this}}),function(){var e=[],n=function(t){if(t.is(":visible")){var e=t.parent().width(),n=t.data("width"),i=e/n,o=Math.floor(i*t.data("height"));t.css({height:n>e?o:t.data("height")})}};t.component("responsiveElement",{defaults:{},boot:function(){t.ready(function(e){t.$("iframe.uk-responsive-width, [data-uk-responsive]",e).each(function(){var e,n=t.$(this);n.data("responsiveElement")||(e=t.responsiveElement(n,{}))})})},init:function(){var t=this.element;t.attr("width")&&t.attr("height")&&(t.data({width:t.attr("width"),height:t.attr("height")}).on("display.uk.check",function(){n(t)}),n(t),e.push(t))}}),t.$win.on("resize load",t.Utils.debounce(function(){e.forEach(function(t){n(t)})},15))}(),t.Utils.stackMargin=function(e,n){n=t.$.extend({cls:"uk-margin-small-top"},n),n.cls=n.cls,e=t.$(e).removeClass(n.cls);var i=!1,o=e.filter(":visible:first"),r=o.length?o.position().top+o.outerHeight()-1:!1;r!==!1&&1!=e.length&&e.each(function(){var e=t.$(this);e.is(":visible")&&(i?e.addClass(n.cls):e.position().top>=r&&(i=e.addClass(n.cls)))})},t.Utils.matchHeights=function(e,n){e=t.$(e).css("min-height",""),n=t.$.extend({row:!0},n);var i=function(e){if(!(e.length<2)){var n=0;e.each(function(){n=Math.max(n,t.$(this).outerHeight())}).each(function(){var e=t.$(this),i=n-("border-box"==e.css("box-sizing")?0:e.outerHeight()-e.height());e.css("min-height",i+"px")})}};n.row?(e.first().width(),setTimeout(function(){var n=!1,o=[];e.each(function(){var e=t.$(this),r=e.offset().top;r!=n&&o.length&&(i(t.$(o)),o=[],r=e.offset().top),o.push(e),n=r}),o.length&&i(t.$(o))},0)):i(e)},function(e){t.Utils.inlineSvg=function(n,i){t.$(n||'img[src$=".svg"]',i||document).each(function(){var n=t.$(this),i=n.attr("src");if(!e[i]){var o=t.$.Deferred();t.$.get(i,{nc:Math.random()},function(e){o.resolve(t.$(e).find("svg"))}),e[i]=o.promise()}e[i].then(function(e){var i=t.$(e).clone();n.attr("id")&&i.attr("id",n.attr("id")),n.attr("class")&&i.attr("class",n.attr("class")),n.attr("style")&&i.attr("style",n.attr("style")),n.attr("width")&&(i.attr("width",n.attr("width")),n.attr("height")||i.removeAttr("height")),n.attr("height")&&(i.attr("height",n.attr("height")),n.attr("width")||i.removeAttr("width")),n.replaceWith(i)})})},t.ready(function(e){t.Utils.inlineSvg("[data-uk-svg]",e)})}({})}(UIkit),function(t){"use strict";function e(e,n){n=t.$.extend({duration:1e3,transition:"easeOutExpo",offset:0,complete:function(){}},n);var i=e.offset().top-n.offset,o=t.$doc.height(),r=window.innerHeight;i+r>o&&(i=o-r),t.$("html,body").stop().animate({scrollTop:i},n.duration,n.transition).promise().done(n.complete)}t.component("smoothScroll",{boot:function(){t.$html.on("click.smooth-scroll.uikit","[data-uk-smooth-scroll]",function(e){var n=t.$(this);if(!n.data("smoothScroll")){t.smoothScroll(n,t.Utils.options(n.attr("data-uk-smooth-scroll")));n.trigger("click")}return!1})},init:function(){var n=this;this.on("click",function(i){i.preventDefault(),e(t.$(this.hash).length?t.$(this.hash):t.$("body"),n.options)})}}),t.Utils.scrollToElement=e,t.$.easing.easeOutExpo||(t.$.easing.easeOutExpo=function(t,e,n,i,o){return e==o?n+i:i*(-Math.pow(2,-10*e/o)+1)+n})}(UIkit),function(t){"use strict";var e=t.$win,n=t.$doc,i=[],o=function(){for(var t=0;t<i.length;t++)window.requestAnimationFrame.apply(window,[i[t].check])};t.component("scrollspy",{defaults:{target:!1,cls:"uk-scrollspy-inview",initcls:"uk-scrollspy-init-inview",topoffset:0,leftoffset:0,repeat:!1,delay:0},boot:function(){n.on("scrolling.uk.document",o),e.on("load resize orientationchange",t.Utils.debounce(o,50)),t.ready(function(e){t.$("[data-uk-scrollspy]",e).each(function(){var e=t.$(this);if(!e.data("scrollspy")){t.scrollspy(e,t.Utils.options(e.attr("data-uk-scrollspy")))}})})},init:function(){var e,n=this,o=this.options.cls.split(/,/),r=function(){var i=n.options.target?n.element.find(n.options.target):n.element,r=1===i.length?1:0,s=0;i.each(function(i){var a=t.$(this),l=a.data("inviewstate"),u=t.Utils.isInView(a,n.options),c=a.data("ukScrollspyCls")||o[s].trim();!u||l||a.data("scrollspy-idle")||(e||(a.addClass(n.options.initcls),n.offset=a.offset(),e=!0,a.trigger("init.uk.scrollspy")),a.data("scrollspy-idle",setTimeout(function(){a.addClass("uk-scrollspy-inview").toggleClass(c).width(),a.trigger("inview.uk.scrollspy"),a.data("scrollspy-idle",!1),a.data("inviewstate",!0)},n.options.delay*r)),r++),!u&&l&&n.options.repeat&&(a.data("scrollspy-idle")&&(clearTimeout(a.data("scrollspy-idle")),a.data("scrollspy-idle",!1)),a.removeClass("uk-scrollspy-inview").toggleClass(c),a.data("inviewstate",!1),a.trigger("outview.uk.scrollspy")),s=o[s+1]?s+1:0})};r(),this.check=r,i.push(this)}});var r=[],s=function(){for(var t=0;t<r.length;t++)window.requestAnimationFrame.apply(window,[r[t].check])};t.component("scrollspynav",{defaults:{cls:"uk-active",closest:!1,topoffset:0,leftoffset:0,smoothscroll:!1},boot:function(){n.on("scrolling.uk.document",s),e.on("resize orientationchange",t.Utils.debounce(s,50)),t.ready(function(e){t.$("[data-uk-scrollspy-nav]",e).each(function(){var e=t.$(this);if(!e.data("scrollspynav")){t.scrollspynav(e,t.Utils.options(e.attr("data-uk-scrollspy-nav")))}})})},init:function(){var n,i=[],o=this.find("a[href^='#']").each(function(){"#"!==this.getAttribute("href").trim()&&i.push(this.getAttribute("href"))}),s=t.$(i.join(",")),a=this.options.cls,l=this.options.closest||this.options.closest,u=this,c=function(){n=[];for(var i=0;i<s.length;i++)t.Utils.isInView(s.eq(i),u.options)&&n.push(s.eq(i));if(n.length){var r,c=e.scrollTop(),d=function(){for(var t=0;t<n.length;t++)if(n[t].offset().top>=c)return n[t]}();if(!d)return;u.options.closest?(o.blur().closest(l).removeClass(a),r=o.filter("a[href='#"+d.attr("id")+"']").closest(l).addClass(a)):r=o.removeClass(a).filter("a[href='#"+d.attr("id")+"']").addClass(a),u.element.trigger("inview.uk.scrollspynav",[d,r])}};this.options.smoothscroll&&t.smoothScroll&&o.each(function(){t.smoothScroll(this,u.options.smoothscroll)}),c(),this.element.data("scrollspynav",this),this.check=c,r.push(this)}})}(UIkit),function(t){"use strict";var e=[];t.component("toggle",{defaults:{target:!1,cls:"uk-hidden",animation:!1,duration:200},boot:function(){t.ready(function(n){t.$("[data-uk-toggle]",n).each(function(){var e=t.$(this);if(!e.data("toggle")){t.toggle(e,t.Utils.options(e.attr("data-uk-toggle")))}}),setTimeout(function(){e.forEach(function(t){t.getToggles()})},0)})},init:function(){var t=this;this.aria=-1!==this.options.cls.indexOf("uk-hidden"),this.getToggles(),this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle()}),e.push(this)},toggle:function(){if(this.totoggle.length){if(this.options.animation&&t.support.animation){var e=this,n=this.options.animation.split(",");1==n.length&&(n[1]=n[0]),n[0]=n[0].trim(),n[1]=n[1].trim(),this.totoggle.css("animation-duration",this.options.duration+"ms"),this.totoggle.each(function(){var i=t.$(this);i.hasClass(e.options.cls)?(i.toggleClass(e.options.cls),t.Utils.animate(i,n[0]).then(function(){i.css("animation-duration",""),t.Utils.checkDisplay(i)})):t.Utils.animate(this,n[1]+" uk-animation-reverse").then(function(){i.toggleClass(e.options.cls).css("animation-duration",""),t.Utils.checkDisplay(i)})})}else this.totoggle.toggleClass(this.options.cls),t.Utils.checkDisplay(this.totoggle);this.updateAria()}},getToggles:function(){this.totoggle=this.options.target?t.$(this.options.target):[],this.updateAria()},updateAria:function(){this.aria&&this.totoggle.length&&this.totoggle.each(function(){t.$(this).attr("aria-hidden",t.$(this).hasClass("uk-hidden"))})}})}(UIkit),function(t){"use strict";t.component("alert",{defaults:{fade:!0,duration:200,trigger:".uk-alert-close"},boot:function(){t.$html.on("click.alert.uikit","[data-uk-alert]",function(e){var n=t.$(this);if(!n.data("alert")){var i=t.alert(n,t.Utils.options(n.attr("data-uk-alert")));t.$(e.target).is(i.options.trigger)&&(e.preventDefault(),i.close())}})},init:function(){var t=this;this.on("click",this.options.trigger,function(e){e.preventDefault(),t.close()})},close:function(){var t=this.trigger("close.uk.alert"),e=function(){this.trigger("closed.uk.alert").remove()}.bind(this);this.options.fade?t.css("overflow","hidden").css("max-height",t.height()).animate({height:0,opacity:0,"padding-top":0,"padding-bottom":0,"margin-top":0,"margin-bottom":0},this.options.duration,e):e()}})}(UIkit),function(t){"use strict";t.component("buttonRadio",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttonradio.uikit","[data-uk-button-radio]",function(e){var n=t.$(this);if(!n.data("buttonRadio")){var i=t.buttonRadio(n,t.Utils.options(n.attr("data-uk-button-radio"))),o=t.$(e.target);o.is(i.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(n){var i=t.$(this);i.is('a[href="#"]')&&n.preventDefault(),e.find(e.options.target).not(i).removeClass(e.options.activeClass).blur(),i.addClass(e.options.activeClass),e.find(e.options.target).not(i).attr("aria-checked","false"),i.attr("aria-checked","true"),e.trigger("change.uk.button",[i])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("buttonCheckbox",{defaults:{activeClass:"uk-active",target:".uk-button"},boot:function(){t.$html.on("click.buttoncheckbox.uikit","[data-uk-button-checkbox]",function(e){var n=t.$(this);if(!n.data("buttonCheckbox")){var i=t.buttonCheckbox(n,t.Utils.options(n.attr("data-uk-button-checkbox"))),o=t.$(e.target);o.is(i.options.target)&&o.trigger("click")}})},init:function(){var e=this;this.find(e.options.target).attr("aria-checked","false").filter("."+e.options.activeClass).attr("aria-checked","true"),this.on("click",this.options.target,function(n){var i=t.$(this);i.is('a[href="#"]')&&n.preventDefault(),i.toggleClass(e.options.activeClass).blur(),i.attr("aria-checked",i.hasClass(e.options.activeClass)),e.trigger("change.uk.button",[i])})},getSelected:function(){return this.find("."+this.options.activeClass)}}),t.component("button",{defaults:{},boot:function(){t.$html.on("click.button.uikit","[data-uk-button]",function(e){var n=t.$(this);if(!n.data("button")){t.button(n,t.Utils.options(n.attr("data-uk-button")));n.trigger("click")}})},init:function(){var t=this;this.element.attr("aria-pressed",this.element.hasClass("uk-active")),this.on("click",function(e){t.element.is('a[href="#"]')&&e.preventDefault(),t.toggle(),t.trigger("change.uk.button",[t.element.blur().hasClass("uk-active")])})},toggle:function(){this.element.toggleClass("uk-active"),this.element.attr("aria-pressed",this.element.hasClass("uk-active"))}})}(UIkit),function(t){"use strict";function e(e,n,i,o){if(e=t.$(e),n=t.$(n),i=i||window.innerWidth,o=o||e.offset(),n.length){var r=n.outerWidth();if(e.css("min-width",r),"right"==t.langdirection){var s=i-(n.offset().left+r),a=i-(e.offset().left+e.outerWidth());e.css("margin-right",s-a)}else e.css("margin-left",n.offset().left-o.left)}}var n,i=!1,o={x:{"bottom-left":"bottom-right","bottom-right":"bottom-left","bottom-center":"bottom-center","top-left":"top-right","top-right":"top-left","top-center":"top-center","left-top":"right-top","left-bottom":"right-bottom","left-center":"right-center","right-top":"left-top","right-bottom":"left-bottom","right-center":"left-center"},y:{"bottom-left":"top-left","bottom-right":"top-right","bottom-center":"top-center","top-left":"bottom-left","top-right":"bottom-right","top-center":"bottom-center","left-top":"left-bottom","left-bottom":"left-top","left-center":"left-center","right-top":"right-bottom","right-bottom":"right-top","right-center":"right-center"},xy:{"bottom-left":"top-right","bottom-right":"top-left","bottom-center":"top-center","top-left":"bottom-right","top-right":"bottom-left","top-center":"bottom-center","left-top":"right-bottom","left-bottom":"right-top","left-center":"right-center","right-top":"left-bottom","right-bottom":"left-top","right-center":"left-center"}};t.component("dropdown",{defaults:{mode:"hover",pos:"bottom-left",offset:0,remaintime:800,justify:!1,boundary:t.$win,delay:0,dropdownSelector:".uk-dropdown,.uk-dropdown-blank",hoverDelayIdle:250,preventflip:!1},remainIdle:!1,boot:function(){var e=t.support.touch?"click":"mouseenter";t.$html.on(e+".dropdown.uikit","[data-uk-dropdown]",function(n){var i=t.$(this);if(!i.data("dropdown")){var o=t.dropdown(i,t.Utils.options(i.attr("data-uk-dropdown")));("click"==e||"mouseenter"==e&&"hover"==o.options.mode)&&o.element.trigger(e),o.element.find(o.options.dropdownSelector).length&&n.preventDefault()}})},init:function(){var e=this;this.dropdown=this.find(this.options.dropdownSelector),this.offsetParent=this.dropdown.parents().filter(function(){return-1!==t.$.inArray(t.$(this).css("position"),["relative","fixed","absolute"])}).slice(0,1),this.centered=this.dropdown.hasClass("uk-dropdown-center"),this.justified=this.options.justify?t.$(this.options.justify):!1,this.boundary=t.$(this.options.boundary),this.boundary.length||(this.boundary=t.$win),this.dropdown.hasClass("uk-dropdown-up")&&(this.options.pos="top-left"),this.dropdown.hasClass("uk-dropdown-flip")&&(this.options.pos=this.options.pos.replace("left","right")),this.dropdown.hasClass("uk-dropdown-center")&&(this.options.pos=this.options.pos.replace(/(left|right)/,"center")),this.element.attr("aria-haspopup","true"),this.element.attr("aria-expanded",this.element.hasClass("uk-open")),"click"==this.options.mode||t.support.touch?this.on("click.uk.dropdown",function(n){var i=t.$(n.target);i.parents(e.options.dropdownSelector).length||((i.is("a[href='#']")||i.parent().is("a[href='#']")||e.dropdown.length&&!e.dropdown.is(":visible"))&&n.preventDefault(),i.blur()),e.element.hasClass("uk-open")?(!e.dropdown.find(n.target).length||i.is(".uk-dropdown-close")||i.parents(".uk-dropdown-close").length)&&e.hide():e.show()}):this.on("mouseenter",function(t){e.trigger("pointerenter.uk.dropdown",[e]),e.remainIdle&&clearTimeout(e.remainIdle),n&&clearTimeout(n),i&&i==e||(n=i&&i!=e?setTimeout(function(){n=setTimeout(e.show.bind(e),e.options.delay)},e.options.hoverDelayIdle):setTimeout(e.show.bind(e),e.options.delay))}).on("mouseleave",function(){n&&clearTimeout(n),e.remainIdle=setTimeout(function(){i&&i==e&&e.hide()},e.options.remaintime),e.trigger("pointerleave.uk.dropdown",[e])}).on("click",function(n){var o=t.$(n.target);return e.remainIdle&&clearTimeout(e.remainIdle),i&&i==e?void((!e.dropdown.find(n.target).length||o.is(".uk-dropdown-close")||o.parents(".uk-dropdown-close").length)&&e.hide()):((o.is("a[href='#']")||o.parent().is("a[href='#']"))&&n.preventDefault(),void e.show())})},show:function(){t.$html.off("click.outer.dropdown"),i&&i!=this&&i.hide(!0),n&&clearTimeout(n),this.trigger("beforeshow.uk.dropdown",[this]),this.checkDimensions(),this.element.addClass("uk-open"),this.element.attr("aria-expanded","true"),this.trigger("show.uk.dropdown",[this]),t.Utils.checkDisplay(this.dropdown,!0),i=this,this.registerOuterClick()},hide:function(t){this.trigger("beforehide.uk.dropdown",[this,t]),this.element.removeClass("uk-open"),this.remainIdle&&clearTimeout(this.remainIdle),this.remainIdle=!1,this.element.attr("aria-expanded","false"),this.trigger("hide.uk.dropdown",[this,t]),i==this&&(i=!1)},registerOuterClick:function(){var e=this;t.$html.off("click.outer.dropdown"),setTimeout(function(){t.$html.on("click.outer.dropdown",function(o){n&&clearTimeout(n);t.$(o.target);i!=e||e.element.find(o.target).length||(e.hide(!0),t.$html.off("click.outer.dropdown"))})},10)},checkDimensions:function(){if(this.dropdown.length){this.dropdown.removeClass("uk-dropdown-top uk-dropdown-bottom uk-dropdown-left uk-dropdown-right uk-dropdown-stack").css({"top-left":"",left:"","margin-left":"","margin-right":""}),this.justified&&this.justified.length&&this.dropdown.css("min-width","");var n,i=t.$.extend({},this.offsetParent.offset(),{width:this.offsetParent[0].offsetWidth,height:this.offsetParent[0].offsetHeight}),r=this.options.offset,s=this.dropdown,a=(s.show().offset()||{left:0,top:0},s.outerWidth()),l=s.outerHeight(),u=this.boundary.width(),c=(this.boundary[0]!==window&&this.boundary.offset()?this.boundary.offset():{top:0,left:0},this.options.pos),d={"bottom-left":{top:0+i.height+r,left:0},"bottom-right":{top:0+i.height+r,left:0+i.width-a},"bottom-center":{top:0+i.height+r,left:0+i.width/2-a/2},"top-left":{top:0-l-r,left:0},"top-right":{top:0-l-r,left:0+i.width-a},"top-center":{top:0-l-r,left:0+i.width/2-a/2},"left-top":{top:0,left:0-a-r},"left-bottom":{top:0+i.height-l,left:0-a-r},"left-center":{top:0+i.height/2-l/2,left:0-a-r},"right-top":{top:0,left:0+i.width+r},"right-bottom":{top:0+i.height-l,left:0+i.width+r},"right-center":{top:0+i.height/2-l/2,left:0+i.width+r}},f={};if(n=c.split("-"),f=d[c]?d[c]:d["bottom-left"],this.justified&&this.justified.length)e(s.css({left:0}),this.justified,u);else if(this.options.preventflip!==!0){var h;switch(this.checkBoundary(i.left+f.left,i.top+f.top,a,l,u)){case"x":"x"!==this.options.preventflip&&(h=o.x[c]||"right-top");break;case"y":"y"!==this.options.preventflip&&(h=o.y[c]||"top-left");break;case"xy":this.options.preventflip||(h=o.xy[c]||"right-bottom")}h&&(n=h.split("-"),f=d[h]?d[h]:d["bottom-left"],this.checkBoundary(i.left+f.left,i.top+f.top,a,l,u)&&(n=c.split("-"),f=d[c]?d[c]:d["bottom-left"]))}a>u&&(s.addClass("uk-dropdown-stack"),this.trigger("stack.uk.dropdown",[this])),s.css(f).css("display","").addClass("uk-dropdown-"+n[0]);
}},checkBoundary:function(e,n,i,o,r){var s="";return(0>e||e-t.$win.scrollLeft()+i>r)&&(s+="x"),(n-t.$win.scrollTop()<0||n-t.$win.scrollTop()+o>window.innerHeight)&&(s+="y"),s}}),t.component("dropdownOverlay",{defaults:{justify:!1,cls:"",duration:200},boot:function(){t.ready(function(e){t.$("[data-uk-dropdown-overlay]",e).each(function(){var e=t.$(this);e.data("dropdownOverlay")||t.dropdownOverlay(e,t.Utils.options(e.attr("data-uk-dropdown-overlay")))})})},init:function(){var n=this;this.justified=this.options.justify?t.$(this.options.justify):!1,this.overlay=this.element.find("uk-dropdown-overlay"),this.overlay.length||(this.overlay=t.$('<div class="uk-dropdown-overlay"></div>').appendTo(this.element)),this.overlay.addClass(this.options.cls),this.on({"beforeshow.uk.dropdown":function(t,i){n.dropdown=i,n.justified&&n.justified.length&&e(n.overlay.css({display:"block","margin-left":"","margin-right":""}),n.justified,n.justified.outerWidth())},"show.uk.dropdown":function(e,i){var o=n.dropdown.dropdown.outerHeight(!0);n.dropdown.element.removeClass("uk-open"),n.overlay.stop().css("display","block").animate({height:o},n.options.duration,function(){n.dropdown.dropdown.css("visibility",""),n.dropdown.element.addClass("uk-open"),t.Utils.checkDisplay(n.dropdown.dropdown,!0)}),n.pointerleave=!1},"hide.uk.dropdown":function(){n.overlay.stop().animate({height:0},n.options.duration)},"pointerenter.uk.dropdown":function(t,e){clearTimeout(n.remainIdle)},"pointerleave.uk.dropdown":function(t,e){n.pointerleave=!0}}),this.overlay.on({mouseenter:function(){n.remainIdle&&(clearTimeout(n.dropdown.remainIdle),clearTimeout(n.remainIdle))},mouseleave:function(){n.pointerleave&&i&&(n.remainIdle=setTimeout(function(){i&&i.hide()},i.options.remaintime))}})}})}(UIkit),function(t){"use strict";var e=[];t.component("gridMatchHeight",{defaults:{target:!1,row:!0,ignorestacked:!1},boot:function(){t.ready(function(e){t.$("[data-uk-grid-match]",e).each(function(){var e,n=t.$(this);n.data("gridMatchHeight")||(e=t.gridMatchHeight(n,t.Utils.options(n.attr("data-uk-grid-match"))))})})},init:function(){var n=this;this.columns=this.element.children(),this.elements=this.options.target?this.find(this.options.target):this.columns,this.columns.length&&(t.$win.on("load resize orientationchange",function(){var e=function(){n.match()};return t.$(function(){e()}),t.Utils.debounce(e,50)}()),t.$html.on("changed.uk.dom",function(t){n.columns=n.element.children(),n.elements=n.options.target?n.find(n.options.target):n.columns,n.match()}),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.match()}.bind(this)),e.push(this))},match:function(){var e=this.columns.filter(":visible:first");if(e.length){var n=Math.ceil(100*parseFloat(e.css("width"))/parseFloat(e.parent().css("width")))>=100;return n&&!this.options.ignorestacked?this.revert():t.Utils.matchHeights(this.elements,this.options),this}},revert:function(){return this.elements.css("min-height",""),this}}),t.component("gridMargin",{defaults:{cls:"uk-grid-margin",rowfirst:"uk-row-first"},boot:function(){t.ready(function(e){t.$("[data-uk-grid-margin]",e).each(function(){var e,n=t.$(this);n.data("gridMargin")||(e=t.gridMargin(n,t.Utils.options(n.attr("data-uk-grid-margin"))))})})},init:function(){t.stackMargin(this.element,this.options)}})}(UIkit),function(t){"use strict";function e(e,n){return n?("object"==typeof e?(e=e instanceof jQuery?e:t.$(e),e.parent().length&&(n.persist=e,n.persist.data("modalPersistParent",e.parent()))):e="string"==typeof e||"number"==typeof e?t.$("<div></div>").html(e):t.$("<div></div>").html("UIkit.modal Error: Unsupported data type: "+typeof e),e.appendTo(n.element.find(".uk-modal-dialog")),n):void 0}var n,i=!1,o=0,r=t.$html;t.component("modal",{defaults:{keyboard:!0,bgclose:!0,minScrollHeight:150,center:!1,modal:!0},scrollable:!1,transition:!1,hasTransitioned:!0,init:function(){if(n||(n=t.$("body")),this.element.length){var e=this;this.paddingdir="padding-"+("left"==t.langdirection?"right":"left"),this.dialog=this.find(".uk-modal-dialog"),this.active=!1,this.element.attr("aria-hidden",this.element.hasClass("uk-open")),this.on("click",".uk-modal-close",function(t){t.preventDefault(),e.hide()}).on("click",function(n){var i=t.$(n.target);i[0]==e.element[0]&&e.options.bgclose&&e.hide()})}},toggle:function(){return this[this.isActive()?"hide":"show"]()},show:function(){if(this.element.length){var e=this;if(!this.isActive())return this.options.modal&&i&&i.hide(!0),this.element.removeClass("uk-open").show(),this.resize(),this.options.modal&&(i=this),this.active=!0,o++,t.support.transition?(this.hasTransitioned=!1,this.element.one(t.support.transition.end,function(){e.hasTransitioned=!0}).addClass("uk-open")):this.element.addClass("uk-open"),r.addClass("uk-modal-page").height(),this.element.attr("aria-hidden","false"),this.element.trigger("show.uk.modal"),t.Utils.checkDisplay(this.dialog,!0),this}},hide:function(e){if(!e&&t.support.transition&&this.hasTransitioned){var n=this;this.one(t.support.transition.end,function(){n._hide()}).removeClass("uk-open")}else this._hide();return this},resize:function(){var t=n.width();if(this.scrollbarwidth=window.innerWidth-t,n.css(this.paddingdir,this.scrollbarwidth),this.element.css("overflow-y",this.scrollbarwidth?"scroll":"auto"),!this.updateScrollable()&&this.options.center){var e=this.dialog.outerHeight(),i=parseInt(this.dialog.css("margin-top"),10)+parseInt(this.dialog.css("margin-bottom"),10);e+i<window.innerHeight?this.dialog.css({top:window.innerHeight/2-e/2-i}):this.dialog.css({top:""})}},updateScrollable:function(){var t=this.dialog.find(".uk-overflow-container:visible:first");if(t.length){t.css("height",0);var e=Math.abs(parseInt(this.dialog.css("margin-top"),10)),n=this.dialog.outerHeight(),i=window.innerHeight,o=i-2*(20>e?20:e)-n;return t.css({"max-height":o<this.options.minScrollHeight?"":o,height:""}),!0}return!1},_hide:function(){this.active=!1,o>0?o--:o=0,this.element.hide().removeClass("uk-open"),this.element.attr("aria-hidden","true"),o||(r.removeClass("uk-modal-page"),n.css(this.paddingdir,"")),i===this&&(i=!1),this.trigger("hide.uk.modal")},isActive:function(){return this.active}}),t.component("modalTrigger",{boot:function(){t.$html.on("click.modal.uikit","[data-uk-modal]",function(e){var n=t.$(this);if(n.is("a")&&e.preventDefault(),!n.data("modalTrigger")){var i=t.modalTrigger(n,t.Utils.options(n.attr("data-uk-modal")));i.show()}}),t.$html.on("keydown.modal.uikit",function(t){i&&27===t.keyCode&&i.options.keyboard&&(t.preventDefault(),i.hide())}),t.$win.on("resize orientationchange",t.Utils.debounce(function(){i&&i.resize()},150))},init:function(){var e=this;this.options=t.$.extend({target:e.element.is("a")?e.element.attr("href"):!1},this.options),this.modal=t.modal(this.options.target,this.options),this.on("click",function(t){t.preventDefault(),e.show()}),this.proxy(this.modal,"show hide isActive")}}),t.modal.dialog=function(n,i){var o=t.modal(t.$(t.modal.dialog.template).appendTo("body"),i);return o.on("hide.uk.modal",function(){o.persist&&(o.persist.appendTo(o.persist.data("modalPersistParent")),o.persist=!1),o.element.remove()}),e(n,o),o},t.modal.dialog.template='<div class="uk-modal"><div class="uk-modal-dialog" style="min-height:0;"></div></div>',t.modal.alert=function(e,n){n=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},n);var i=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-button-primary uk-modal-close">'+n.labels.Ok+"</button></div>"].join(""),n);return i.on("show.uk.modal",function(){setTimeout(function(){i.element.find("button:first").focus()},50)}),i.show()},t.modal.confirm=function(e,n,i){var o=arguments.length>1&&arguments[arguments.length-1]?arguments[arguments.length-1]:{};n=t.$.isFunction(n)?n:function(){},i=t.$.isFunction(i)?i:function(){},o=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},t.$.isFunction(o)?{}:o);var r=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e)+"</div>",'<div class="uk-modal-footer uk-text-right"><button class="uk-button js-modal-confirm-cancel">'+o.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-confirm">'+o.labels.Ok+"</button></div>"].join(""),o);return r.element.find(".js-modal-confirm, .js-modal-confirm-cancel").on("click",function(){t.$(this).is(".js-modal-confirm")?n():i(),r.hide()}),r.on("show.uk.modal",function(){setTimeout(function(){r.element.find(".js-modal-confirm").focus()},50)}),r.show()},t.modal.prompt=function(e,n,i,o){i=t.$.isFunction(i)?i:function(t){},o=t.$.extend(!0,{bgclose:!1,keyboard:!1,modal:!1,labels:t.modal.labels},o);var r=t.modal.dialog([e?'<div class="uk-modal-content uk-form">'+String(e)+"</div>":"",'<div class="uk-margin-small-top uk-modal-content uk-form"><p><input type="text" class="uk-width-1-1"></p></div>','<div class="uk-modal-footer uk-text-right"><button class="uk-button uk-modal-close">'+o.labels.Cancel+'</button> <button class="uk-button uk-button-primary js-modal-ok">'+o.labels.Ok+"</button></div>"].join(""),o),s=r.element.find("input[type='text']").val(n||"").on("keyup",function(t){13==t.keyCode&&r.element.find(".js-modal-ok").trigger("click")});return r.element.find(".js-modal-ok").on("click",function(){i(s.val())!==!1&&r.hide()}),r.on("show.uk.modal",function(){setTimeout(function(){s.focus()},50)}),r.show()},t.modal.blockUI=function(e,n){var i=t.modal.dialog(['<div class="uk-margin uk-modal-content">'+String(e||'<div class="uk-text-center">...</div>')+"</div>"].join(""),t.$.extend({bgclose:!1,keyboard:!1,modal:!1},n));return i.content=i.element.find(".uk-modal-content:first"),i.show()},t.modal.labels={Ok:"Ok",Cancel:"Cancel"}}(UIkit),function(t){"use strict";function e(e){var n=t.$(e),i="auto";if(n.is(":visible"))i=n.outerHeight();else{var o={position:n.css("position"),visibility:n.css("visibility"),display:n.css("display")};i=n.css({position:"absolute",visibility:"hidden",display:"block"}).outerHeight(),n.css(o)}return i}t.component("nav",{defaults:{toggle:">li.uk-parent > a[href='#']",lists:">li.uk-parent > ul",multiple:!1},boot:function(){t.ready(function(e){t.$("[data-uk-nav]",e).each(function(){var e=t.$(this);if(!e.data("nav")){t.nav(e,t.Utils.options(e.attr("data-uk-nav")))}})})},init:function(){var e=this;this.on("click.uk.nav",this.options.toggle,function(n){n.preventDefault();var i=t.$(this);e.open(i.parent()[0]==e.element[0]?i:i.parent("li"))}),this.find(this.options.lists).each(function(){var n=t.$(this),i=n.parent(),o=i.hasClass("uk-active");n.wrap('<div style="overflow:hidden;height:0;position:relative;"></div>'),i.data("list-container",n.parent()[o?"removeClass":"addClass"]("uk-hidden")),i.attr("aria-expanded",i.hasClass("uk-open")),o&&e.open(i,!0)})},open:function(n,i){var o=this,r=this.element,s=t.$(n),a=s.data("list-container");this.options.multiple||r.children(".uk-open").not(n).each(function(){var e=t.$(this);e.data("list-container")&&e.data("list-container").stop().animate({height:0},function(){t.$(this).parent().removeClass("uk-open").end().addClass("uk-hidden")})}),s.toggleClass("uk-open"),s.attr("aria-expanded",s.hasClass("uk-open")),a&&(s.hasClass("uk-open")&&a.removeClass("uk-hidden"),i?(a.stop().height(s.hasClass("uk-open")?"auto":0),s.hasClass("uk-open")||a.addClass("uk-hidden"),this.trigger("display.uk.check")):a.stop().animate({height:s.hasClass("uk-open")?e(a.find("ul:first")):0},function(){s.hasClass("uk-open")?a.css("height",""):a.addClass("uk-hidden"),o.trigger("display.uk.check")}))}})}(UIkit),function(t){"use strict";var e={x:window.scrollX,y:window.scrollY},n=(t.$win,t.$doc,t.$html),i={show:function(i){if(i=t.$(i),i.length){var o=t.$("body"),r=i.find(".uk-offcanvas-bar:first"),s="right"==t.langdirection,a=r.hasClass("uk-offcanvas-bar-flip")?-1:1,l=a*(s?-1:1),u=window.innerWidth-o.width();e={x:window.pageXOffset,y:window.pageYOffset},i.addClass("uk-active"),o.css({width:window.innerWidth-u,height:window.innerHeight}).addClass("uk-offcanvas-page"),o.css(s?"margin-right":"margin-left",(s?-1:1)*(r.outerWidth()*l)).width(),n.css("margin-top",-1*e.y),r.addClass("uk-offcanvas-bar-show"),this._initElement(i),r.trigger("show.uk.offcanvas",[i,r]),i.attr("aria-hidden","false")}},hide:function(i){var o=t.$("body"),r=t.$(".uk-offcanvas.uk-active"),s="right"==t.langdirection,a=r.find(".uk-offcanvas-bar:first"),l=function(){o.removeClass("uk-offcanvas-page").css({width:"",height:"","margin-left":"","margin-right":""}),r.removeClass("uk-active"),a.removeClass("uk-offcanvas-bar-show"),n.css("margin-top",""),window.scrollTo(e.x,e.y),a.trigger("hide.uk.offcanvas",[r,a]),r.attr("aria-hidden","true")};r.length&&(t.support.transition&&!i?(o.one(t.support.transition.end,function(){l()}).css(s?"margin-right":"margin-left",""),setTimeout(function(){a.removeClass("uk-offcanvas-bar-show")},0)):l())},_initElement:function(e){e.data("OffcanvasInit")||(e.on("click.uk.offcanvas swipeRight.uk.offcanvas swipeLeft.uk.offcanvas",function(e){var n=t.$(e.target);if(!e.type.match(/swipe/)&&!n.hasClass("uk-offcanvas-close")){if(n.hasClass("uk-offcanvas-bar"))return;if(n.parents(".uk-offcanvas-bar:first").length)return}e.stopImmediatePropagation(),i.hide()}),e.on("click","a[href*='#']",function(e){var n=t.$(this),o=n.attr("href");"#"!=o&&(t.$doc.one("hide.uk.offcanvas",function(){var e;try{e=t.$(n[0].hash)}catch(i){e=""}e.length||(e=t.$('[name="'+n[0].hash.replace("#","")+'"]')),e.length&&t.Utils.scrollToElement?t.Utils.scrollToElement(e,t.Utils.options(n.attr("data-uk-smooth-scroll")||"{}")):window.location.href=o}),i.hide())}),e.data("OffcanvasInit",!0))}};t.component("offcanvasTrigger",{boot:function(){n.on("click.offcanvas.uikit","[data-uk-offcanvas]",function(e){e.preventDefault();var n=t.$(this);if(!n.data("offcanvasTrigger")){t.offcanvasTrigger(n,t.Utils.options(n.attr("data-uk-offcanvas")));n.trigger("click")}}),n.on("keydown.uk.offcanvas",function(t){27===t.keyCode&&i.hide()})},init:function(){var e=this;this.options=t.$.extend({target:e.element.is("a")?e.element.attr("href"):!1},this.options),this.on("click",function(t){t.preventDefault(),i.show(e.options.target)})}}),t.offcanvas=i}(UIkit),function(t){"use strict";function e(e,n,i){var o,r=t.$.Deferred(),s=e,a=e;return i[0]===n[0]?(r.resolve(),r.promise()):("object"==typeof e&&(s=e[0],a=e[1]||e[0]),t.$body.css("overflow-x","hidden"),o=function(){n&&n.hide().removeClass("uk-active "+a+" uk-animation-reverse"),i.addClass(s).one(t.support.animation.end,function(){i.removeClass(""+s).css({opacity:"",display:""}),r.resolve(),t.$body.css("overflow-x",""),n&&n.css({opacity:"",display:""})}.bind(this)).show()},i.css("animation-duration",this.options.duration+"ms"),n&&n.length?(n.css("animation-duration",this.options.duration+"ms"),n.css("display","none").addClass(a+" uk-animation-reverse").one(t.support.animation.end,function(){o()}.bind(this)).css("display","")):(i.addClass("uk-active"),o()),r.promise())}var n;t.component("switcher",{defaults:{connect:!1,toggle:">*",active:0,animation:!1,duration:200,swiping:!0},animating:!1,boot:function(){t.ready(function(e){t.$("[data-uk-switcher]",e).each(function(){var e=t.$(this);if(!e.data("switcher")){t.switcher(e,t.Utils.options(e.attr("data-uk-switcher")))}})})},init:function(){var e=this;if(this.on("click.uk.switcher",this.options.toggle,function(t){t.preventDefault(),e.show(this)}),this.options.connect){this.connect=t.$(this.options.connect),this.connect.find(".uk-active").removeClass(".uk-active"),this.connect.length&&(this.connect.children().attr("aria-hidden","true"),this.connect.on("click","[data-uk-switcher-item]",function(n){n.preventDefault();var i=t.$(this).attr("data-uk-switcher-item");if(e.index!=i)switch(i){case"next":case"previous":e.show(e.index+("next"==i?1:-1));break;default:e.show(parseInt(i,10))}}),this.options.swiping&&this.connect.on("swipeRight swipeLeft",function(t){t.preventDefault(),window.getSelection().toString()||e.show(e.index+("swipeLeft"==t.type?1:-1))}));var n=this.find(this.options.toggle),i=n.filter(".uk-active");if(i.length)this.show(i,!1);else{if(this.options.active===!1)return;i=n.eq(this.options.active),this.show(i.length?i:n.eq(0),!1)}n.not(i).attr("aria-expanded","false"),i.attr("aria-expanded","true"),this.on("changed.uk.dom",function(){e.connect=t.$(e.options.connect)})}},show:function(i,o){if(!this.animating){if(isNaN(i))i=t.$(i);else{var r=this.find(this.options.toggle);i=0>i?r.length-1:i,i=r.eq(r[i]?i:0)}var s=this,r=this.find(this.options.toggle),a=t.$(i),l=n[this.options.animation]||function(t,i){if(!s.options.animation)return n.none.apply(s);var o=s.options.animation.split(",");return 1==o.length&&(o[1]=o[0]),o[0]=o[0].trim(),o[1]=o[1].trim(),e.apply(s,[o,t,i])};o!==!1&&t.support.animation||(l=n.none),a.hasClass("uk-disabled")||(r.attr("aria-expanded","false"),a.attr("aria-expanded","true"),r.filter(".uk-active").removeClass("uk-active"),a.addClass("uk-active"),this.options.connect&&this.connect.length&&(this.index=this.find(this.options.toggle).index(a),-1==this.index&&(this.index=0),this.connect.each(function(){var e=t.$(this),n=t.$(e.children()),i=t.$(n.filter(".uk-active")),o=t.$(n.eq(s.index));s.animating=!0,l.apply(s,[i,o]).then(function(){i.removeClass("uk-active"),o.addClass("uk-active"),i.attr("aria-hidden","true"),o.attr("aria-hidden","false"),t.Utils.checkDisplay(o,!0),s.animating=!1})})),this.trigger("show.uk.switcher",[a]))}}}),n={none:function(){var e=t.$.Deferred();return e.resolve(),e.promise()},fade:function(t,n){return e.apply(this,["uk-animation-fade",t,n])},"slide-bottom":function(t,n){return e.apply(this,["uk-animation-slide-bottom",t,n])},"slide-top":function(t,n){return e.apply(this,["uk-animation-slide-top",t,n])},"slide-vertical":function(t,n,i){var o=["uk-animation-slide-top","uk-animation-slide-bottom"];return t&&t.index()>n.index()&&o.reverse(),e.apply(this,[o,t,n])},"slide-left":function(t,n){return e.apply(this,["uk-animation-slide-left",t,n])},"slide-right":function(t,n){return e.apply(this,["uk-animation-slide-right",t,n])},"slide-horizontal":function(t,n,i){var o=["uk-animation-slide-right","uk-animation-slide-left"];return t&&t.index()>n.index()&&o.reverse(),e.apply(this,[o,t,n])},scale:function(t,n){return e.apply(this,["uk-animation-scale-up",t,n])}},t.switcher.animations=n}(UIkit),function(t){"use strict";t.component("tab",{defaults:{target:">li:not(.uk-tab-responsive, .uk-disabled)",connect:!1,active:0,animation:!1,duration:200,swiping:!0},boot:function(){t.ready(function(e){t.$("[data-uk-tab]",e).each(function(){var e=t.$(this);if(!e.data("tab")){t.tab(e,t.Utils.options(e.attr("data-uk-tab")))}})})},init:function(){var e=this;this.current=!1,this.on("click.uk.tab",this.options.target,function(n){if(n.preventDefault(),!e.switcher||!e.switcher.animating){var i=e.find(e.options.target).not(this);i.removeClass("uk-active").blur(),e.trigger("change.uk.tab",[t.$(this).addClass("uk-active"),e.current]),e.current=t.$(this),e.options.connect||(i.attr("aria-expanded","false"),t.$(this).attr("aria-expanded","true"))}}),this.options.connect&&(this.connect=t.$(this.options.connect)),this.responsivetab=t.$('<li class="uk-tab-responsive uk-active"><a></a></li>').append('<div class="uk-dropdown uk-dropdown-small"><ul class="uk-nav uk-nav-dropdown"></ul><div>'),this.responsivetab.dropdown=this.responsivetab.find(".uk-dropdown"),this.responsivetab.lst=this.responsivetab.dropdown.find("ul"),this.responsivetab.caption=this.responsivetab.find("a:first"),this.element.hasClass("uk-tab-bottom")&&this.responsivetab.dropdown.addClass("uk-dropdown-up"),this.responsivetab.lst.on("click.uk.tab","a",function(n){n.preventDefault(),n.stopPropagation();var i=t.$(this);e.element.children("li:not(.uk-tab-responsive)").eq(i.data("index")).trigger("click")}),this.on("show.uk.switcher change.uk.tab",function(t,n){e.responsivetab.caption.html(n.text())}),this.element.append(this.responsivetab),this.options.connect&&(this.switcher=t.switcher(this.element,{toggle:">li:not(.uk-tab-responsive)",connect:this.options.connect,active:this.options.active,animation:this.options.animation,duration:this.options.duration,swiping:this.options.swiping})),t.dropdown(this.responsivetab,{mode:"click",preventflip:"y"}),e.trigger("change.uk.tab",[this.element.find(this.options.target).not(".uk-tab-responsive").filter(".uk-active")]),this.check(),t.$win.on("resize orientationchange",t.Utils.debounce(function(){e.element.is(":visible")&&e.check()},100)),this.on("display.uk.check",function(){e.element.is(":visible")&&e.check()})},check:function(){var e=this.element.children("li:not(.uk-tab-responsive)").removeClass("uk-hidden");if(!e.length)return void this.responsivetab.addClass("uk-hidden");var n,i,o,r=e.eq(0).offset().top+Math.ceil(e.eq(0).height()/2),s=!1;if(this.responsivetab.lst.empty(),e.each(function(){t.$(this).offset().top>r&&(s=!0)}),s)for(var a=0;a<e.length;a++)n=t.$(e.eq(a)),i=n.find("a"),"none"==n.css("float")||n.attr("uk-dropdown")||(n.hasClass("uk-disabled")||(o=n[0].outerHTML.replace("<a ",'<a data-index="'+a+'" '),this.responsivetab.lst.append(o)),n.addClass("uk-hidden"));this.responsivetab[this.responsivetab.lst.children("li").length?"removeClass":"addClass"]("uk-hidden")}})}(UIkit),function(t){"use strict";t.component("cover",{defaults:{automute:!0},boot:function(){t.ready(function(e){t.$("[data-uk-cover]",e).each(function(){var e=t.$(this);if(!e.data("cover")){t.cover(e,t.Utils.options(e.attr("data-uk-cover")))}})})},init:function(){if(this.parent=this.element.parent(),t.$win.on("load resize orientationchange",t.Utils.debounce(function(){this.check()}.bind(this),100)),this.on("display.uk.check",function(t){this.element.is(":visible")&&this.check()}.bind(this)),this.check(),this.element.is("iframe")&&this.options.automute){var e=this.element.attr("src");this.element.attr("src","").on("load",function(){this.contentWindow.postMessage('{ "event": "command", "func": "mute", "method":"setVolume", "value":0}',"*")}).attr("src",[e,e.indexOf("?")>-1?"&":"?","enablejsapi=1&api=1"].join(""))}},check:function(){this.element.css({width:"",height:""}),this.dimension={w:this.element.width(),h:this.element.height()},this.element.attr("width")&&!isNaN(this.element.attr("width"))&&(this.dimension.w=this.element.attr("width")),this.element.attr("height")&&!isNaN(this.element.attr("height"))&&(this.dimension.h=this.element.attr("height")),this.ratio=this.dimension.w/this.dimension.h;var t,e,n=this.parent.width(),i=this.parent.height();n/this.ratio<i?(t=Math.ceil(i*this.ratio),e=i):(t=n,e=Math.ceil(n/this.ratio)),this.element.css({width:t,height:e})}})}(UIkit);
//# sourceMappingURL=data:application/json;base64,
